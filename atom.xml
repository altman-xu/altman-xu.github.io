<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Altman&#39;s Blog</title>
  
  
  <link href="https://altman-xu.github.io/atom.xml" rel="self"/>
  
  <link href="https://altman-xu.github.io/"/>
  <updated>2023-11-08T10:00:20.896Z</updated>
  <id>https://altman-xu.github.io/</id>
  
  <author>
    <name>Altman</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本博客搭建(v2):Hexo-GithubPages-GithubAction</title>
    <link href="https://altman-xu.github.io/2023/11/08/Build-Blog-Hexo-GithubPages-GithubAction/"/>
    <id>https://altman-xu.github.io/2023/11/08/Build-Blog-Hexo-GithubPages-GithubAction/</id>
    <published>2023-11-08T08:29:26.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://altman-xu.github.io/2021/04/19/Build-Blog-Hexo-GithubPages-TraviCI-Pure/">本博客搭建:Hexo+GithubPages+TraviCI+pure</a><br><a href="https://blog.zhanganzhi.com/zh-CN/2022/06/0800d76d306e/">GitHub Actions 自动部署 Hexo 博客</a><br><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a><br><a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-affects-specific-files">GitHub Actions 官方文档</a></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>原有的 blog 搭建流程<a href="https://altman-xu.github.io/2021/04/19/Build-Blog-Hexo-GithubPages-TraviCI-Pure/">本博客搭建:Hexo+GithubPages+TraviCI+pure</a> 随着 Travi CI 在 2020 年开始收费, 已经不可用. </p><p>所以改用新的方式搭建博客</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>博客用一个仓库地址</li><li>source 分支用来存放 项目源代码</li><li>master 分支用来存放 hexo 编译 source 分支的文件后，生成的文件</li><li>用户只需要编写 md 博客文档, 编译生成 html 的动作交由 cicd 流程</li><li>之前的 cicd 使用 travi ci</li><li>新方式改用为 GithubAction</li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文调整之前搭建流程的 ci 模块 <a href="https://altman-xu.github.io/2021/04/19/Build-Blog-Hexo-GithubPages-TraviCI-Pure/#Travis-CI-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88">本博客搭建:Hexo+GithubPages+TraviCI+pure</a> </p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="本地生成-ssh-密钥对"><a href="#本地生成-ssh-密钥对" class="headerlink" title="本地生成 ssh 密钥对"></a>本地生成 ssh 密钥对</h3><p>在本地生成一对 SSH 密钥，注意更改文件名避免将正在使用的密钥覆盖。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;xuzhihua1107@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><p>在博客仓库的 Settings -&gt; Secrets -&gt; Actions 中添加 SSH 私钥, 内容为刚刚生成的 id_ed25519 文件的秘钥值, 命名为 SSH_DEPLOY_KEY</p><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20231108-gitaction-1.png" alt="20231108-gitaction-1"></p><p>在部署仓库的 Settings -&gt; Deploy keys 中添加 SSH 公钥, 内容为刚刚生成的 id_ed25519.pub 文件的公钥值, 命名为 public key of SSH_DEPLOY_KEY 注意勾选 Allow write access。</p><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20231108-gitaction-2.png" alt="20231108-gitaction-2"></p><blockquote><p>注: 后续的 workflow 会使用 SSH_DEPLOY_KEY 公钥值来部署</p></blockquote><h3 id="在-config-yml-添加内容"><a href="#在-config-yml-添加内容" class="headerlink" title="在 _config.yml 添加内容"></a>在 _config.yml 添加内容</h3><p><a href="https://github.com/altman-xu/altman-xu.github.io/blob/source/_config.yml">_config.yml</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:altman-xu/altman-xu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="编写-workflow"><a href="#编写-workflow" class="headerlink" title="编写 workflow"></a>编写 workflow</h3><p>创建 <a href="https://github.com/altman-xu/altman-xu.github.io/blob/source/.github/workflows/githubactions.yaml">.github/workflows/githubactions.yml</a></p><p>写入以下内容，注意修改仓库地址和 Git 配置。此时当 push 到博客仓库时，GitHub Actions 将会自动部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">name: githubactions <span class="comment"># yml文件名</span></span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  GIT_USER: altman-xu</span><br><span class="line">  GIT_EMAIL: xuzhihua1107@gmail.com</span><br><span class="line">  DEPLOY_REPO: altman-xu/altman-xu.github.io</span><br><span class="line">  DEPLOY_BRANCH: master </span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - <span class="built_in">source</span>    <span class="comment"># 仅当推送 source 分支时才运行工作流程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build-and-deploy: <span class="comment"># 任务名</span></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout <span class="built_in">source</span>               <span class="comment"># 下载 source 分支代码</span></span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with: </span><br><span class="line">          ref: <span class="built_in">source</span></span><br><span class="line">      - name: Setup Nodejs                  <span class="comment"># 安装 node.js</span></span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">      - name: Cache node modules            <span class="comment"># 缓存 node</span></span><br><span class="line">        id: cache-npm</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          <span class="comment"># npm cache files are stored in `~/.npm` on Linux/macOS</span></span><br><span class="line">          path: ~/.npm</span><br><span class="line">          key: <span class="variable">$&#123;&#123; runner.os &#125;</span>&#125;-build-<span class="variable">$&#123;&#123; env.cache-name &#125;</span>&#125;-<span class="variable">$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;</span>&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            <span class="variable">$&#123;&#123; runner.os &#125;</span>&#125;-build-<span class="variable">$&#123;&#123; env.cache-name &#125;</span>&#125;-</span><br><span class="line">            <span class="variable">$&#123;&#123; runner.os &#125;</span>&#125;-build-</span><br><span class="line">            <span class="variable">$&#123;&#123; runner.os &#125;</span>&#125;-</span><br><span class="line"></span><br><span class="line">      - name: Debug Cache Hit</span><br><span class="line">        run: <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;&#123; steps.cache-npm.outputs.cache-hit &#125;</span>&#125;&quot;</span>  <span class="comment"># true 代表缓存命中 ~/.npm 没有变化; 而&#x27;&#x27;代表没有命中, ~/.npm 发生变化</span></span><br><span class="line"></span><br><span class="line">      - name: Install npm                                   <span class="comment"># 只有结果是&#x27;&#x27;时才执行</span></span><br><span class="line">        <span class="keyword">if</span>: <span class="variable">$&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;</span>&#125;</span><br><span class="line">        continue-on-error: <span class="literal">true</span></span><br><span class="line">        run: npm install                                    <span class="comment"># 在根目录安装站点需要的依赖</span></span><br><span class="line"></span><br><span class="line">      - name: Install npm hexo                              <span class="comment"># 安装依赖</span></span><br><span class="line">        <span class="comment"># if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;  # 缓存暂时不能对 hexo 相关生效, 奇怪</span></span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-cli -g                           <span class="comment"># 在 CI 环境内安装 Hexo</span></span><br><span class="line">          npm install hexo-wordcount --save                 <span class="comment"># 安装插件 hexo-wordcount</span></span><br><span class="line">          npm install hexo-generator-json-content --save    <span class="comment"># 安装插件 hexo-generator-json-content</span></span><br><span class="line">          npm install hexo-generator-feed --save            <span class="comment"># 安装插件 hexo-generator-feed</span></span><br><span class="line">          npm install hexo-generator-sitemap --save         <span class="comment"># 安装插件 hexo-generator-sitemap</span></span><br><span class="line">          npm install hexo-generator-baidu-sitemap --save   <span class="comment"># 安装插件 hexo-generator-baidu-sitemap</span></span><br><span class="line">          npm install hexo-deployer-git --save              <span class="comment"># 安装插件 用来执行 hexo deploy</span></span><br><span class="line">      - name: Setup Git                   <span class="comment"># 设置 git 环境变量</span></span><br><span class="line">        run: |</span><br><span class="line">          git config --global user.name <span class="variable">$GIT_USER</span></span><br><span class="line">          git config --global user.email <span class="variable">$GIT_EMAIL</span></span><br><span class="line">      - name: Setup SSH Key               <span class="comment"># 设置 sshkey</span></span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;&#123; secrets.SSH_DEPLOY_KEY &#125;</span>&#125;&quot;</span> &gt; ~/.ssh/id_ed25519</span><br><span class="line">          chmod 600 ~/.ssh/id_ed25519</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">      - name: hexo generate</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line">      - name: hexo deploy</span><br><span class="line">        run: |</span><br><span class="line">          hexo deploy</span><br></pre></td></tr></table></figure><h2 id="cicd-执行"><a href="#cicd-执行" class="headerlink" title="cicd 执行"></a>cicd 执行</h2><p>每次在 source 分支, 编写新博客 md 文件, 提交到 git 远程后，都会触发 cicd 流程, 如下图所示, 可以点击进去查看 cicd 执行的每个步骤</p><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20231108-gitaction-3.png" alt="20231108-gitaction-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://altman-xu.github.io/2021/04/19/Build-Blog-Hexo-GithubPages-TraviCI-Pure/&quot;&gt;本博客搭建:Hexo+GithubPages+TraviCI+pu</summary>
      
    
    
    
    <category term="Blog" scheme="https://altman-xu.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://altman-xu.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Life-30</title>
    <link href="https://altman-xu.github.io/2023/11/07/Life-30/"/>
    <id>https://altman-xu.github.io/2023/11/07/Life-30/</id>
    <published>2023-11-07T09:51:00.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>一眨眼, 已经 30 了</p><p>1993-2023</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一眨眼, 已经 30 了&lt;/p&gt;
&lt;p&gt;1993-2023&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Life" scheme="https://altman-xu.github.io/categories/Life/"/>
    
    
    <category term="Life" scheme="https://altman-xu.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>博客重启</title>
    <link href="https://altman-xu.github.io/2023/10/25/Blog-Restart-2023/"/>
    <id>https://altman-xu.github.io/2023/10/25/Blog-Restart-2023/</id>
    <published>2023-10-25T08:10:10.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重新开始"><a href="#重新开始" class="headerlink" title="重新开始"></a>重新开始</h2><p>重新打开我的 <a href="https://github.com/altman-xu/altman-xu.github.io">博客git仓库</a>, 发现上一次编辑是 2021.07.22, 已经两年多了. 重新开始</p><table><thead><tr><th></th><th>blog 网页地址</th><th>git 仓库地址</th></tr></thead><tbody><tr><td>old</td><td><a href="https://altman-xu.github.io/xuzhihua/">https://altman-xu.github.io/xuzhihua/</a></td><td><a href="https://github.com/altman-xu/xuzhihua">https://github.com/altman-xu/xuzhihua</a></td></tr><tr><td>new</td><td><a href="https://altman-xu.github.io/">https://altman-xu.github.io/</a></td><td><a href="https://github.com/altman-xu/altman-xu.github.io">https://github.com/altman-xu/altman-xu.github.io</a></td></tr></tbody></table><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 安装 hexo</span></span><br><span class="line">brew install hexo</span><br><span class="line"><span class="comment">## 2. 在 ~/Documents 目录下 clone 博客仓库</span></span><br><span class="line"><span class="built_in">cd</span> ~/Documents</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:altman-xu/altman-xu.github.io.git</span><br><span class="line"><span class="comment">## 3. 进入 altman-xu.github.io 目录, 切换到 source 分支</span></span><br><span class="line"><span class="built_in">cd</span> altman-xu.github.io</span><br><span class="line">git checkout <span class="built_in">source</span></span><br><span class="line"><span class="comment">## 4. 启动 hexo</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">## 5. 提示启动失败</span></span><br><span class="line">ERROR Cannot find module <span class="string">&#x27;hexo&#x27;</span> from <span class="string">&#x27;/Users/zhihua.xu/Documents/altman-xu.github.io&#x27;</span></span><br><span class="line">ERROR Local hexo loading failed <span class="keyword">in</span> ~/Documents/altman-xu.github.io</span><br><span class="line">ERROR Try running: <span class="string">&#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行提示的命令</span></span><br><span class="line">rm -rf node_modules &amp;&amp; npm install --force</span><br><span class="line"><span class="comment">## 6. 再次启动 hexo</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">## 成功, 然后退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 7. 创建新文档编辑</span></span><br><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 8. 查看效果</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment">## 点击 http://localhost:4000 进入效果页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 9. 提交 source 分支改动, 远程会 TraviCI 自动编译到 master 分支</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重新开始&quot;&gt;&lt;a href=&quot;#重新开始&quot; class=&quot;headerlink&quot; title=&quot;重新开始&quot;&gt;&lt;/a&gt;重新开始&lt;/h2&gt;&lt;p&gt;重新打开我的 &lt;a href=&quot;https://github.com/altman-xu/altman-xu.github.</summary>
      
    
    
    
    <category term="Blog" scheme="https://altman-xu.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://altman-xu.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch-AdvanceSearch</title>
    <link href="https://altman-xu.github.io/2021/07/21/Elasticsearch-AdvanceSearch/"/>
    <id>https://altman-xu.github.io/2021/07/21/Elasticsearch-AdvanceSearch/</id>
    <published>2021-07-21T08:09:32.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="批量导入数据"><a href="#批量导入数据" class="headerlink" title="批量导入数据"></a>批量导入数据</h2><p>将 account.json 的数据加载到 elastic 中<br>数据类似如下(2条)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;account_number&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;balance&quot;</span>:<span class="number">39225</span>,<span class="attr">&quot;firstname&quot;</span>:<span class="string">&quot;Amber&quot;</span>,<span class="attr">&quot;lastname&quot;</span>:<span class="string">&quot;Duke&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">32</span>,<span class="attr">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;880 Holmes Lane&quot;</span>,<span class="attr">&quot;employer&quot;</span>:<span class="string">&quot;Pyrami&quot;</span>,<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;amberduke@pyrami.com&quot;</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;Brogan&quot;</span>,<span class="attr">&quot;state&quot;</span>:<span class="string">&quot;IL&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;6&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;account_number&quot;</span>:<span class="number">6</span>,<span class="attr">&quot;balance&quot;</span>:<span class="number">5686</span>,<span class="attr">&quot;firstname&quot;</span>:<span class="string">&quot;Hattie&quot;</span>,<span class="attr">&quot;lastname&quot;</span>:<span class="string">&quot;Bond&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">36</span>,<span class="attr">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;671 Bristol Street&quot;</span>,<span class="attr">&quot;employer&quot;</span>:<span class="string">&quot;Netagy&quot;</span>,<span class="attr">&quot;email&quot;</span>:<span class="string">&quot;hattiebond@netagy.com&quot;</span>,<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;Dante&quot;</span>,<span class="attr">&quot;state&quot;</span>:<span class="string">&quot;TN&quot;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## cd account.json 文件所在的目录</span></span><br><span class="line">curl -XPOST <span class="string">&quot;localhost:9200/bank/_bulk?pretty&amp;refresh&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> --data-binary <span class="string">&quot;@accounts.json&quot;</span></span><br><span class="line"></span><br><span class="line">curl -XGET <span class="string">&quot;localhost:9200/_cat/indices?v&quot;</span></span><br><span class="line"><span class="comment">## output 可以看到 1000 个 doc 已经存储到 bank 索引中了</span></span><br><span class="line">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   bank     qerxmeePRsmIeXoZ58eNsQ   1   1       1000            0    396.8kb        396.8kb</span><br><span class="line">yellow open   customer LbQLl0UQTSOPnn54wQwA2g   1   1          1            1      4.3kb          4.3kb</span><br></pre></td></tr></table></figure><h2 id="搜索-search"><a href="#搜索-search" class="headerlink" title="搜索 _search"></a>搜索 _search</h2><p>注意，一旦获得了搜索结果，Elasticsearch就会结束这次搜索，不会再维护任何服务端资源，也没有结果游标，这与其他很多平台，如SQL，不一样。</p><h3 id="通过-uri-传递参数"><a href="#通过-uri-传递参数" class="headerlink" title="通过 uri 传递参数"></a>通过 uri 传递参数</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search?q=*&amp;sort=account_number:asc&amp;pretty</span><br><span class="line">curl -XGET <span class="string">&quot;localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&quot;</span></span><br><span class="line"><span class="comment">## 参数说明</span></span><br><span class="line"><span class="comment"># q=* 搜索索引中的所有文档</span></span><br><span class="line"><span class="comment"># sort=account_number:asc 搜索结果以字段account_number升序排列</span></span><br><span class="line"><span class="comment"># pretty 返回结果以漂亮的JSON格式打印</span></span><br></pre></td></tr></table></figure><h3 id="通过-request-body-传递参数"><a href="#通过-request-body-传递参数" class="headerlink" title="通过 request body 传递参数"></a>通过 request body 传递参数</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123; <span class="string">&quot;match_all&quot;</span>: &#123;&#125; &#125;,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;account_number&quot;</span>: <span class="string">&quot;asc&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">curl -XGET <span class="string">&quot;localhost:9200/bank/_search&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;sort&quot;: [</span></span><br><span class="line"><span class="string">    &#123;&quot;account_number&quot;: &quot;asc&quot;&#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">22</span>,                      <span class="comment">// 搜索时间(毫秒)</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,              <span class="comment">// 搜索是否超时</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;                     <span class="comment">// 搜索了多少分片，搜索分片的成功/失败计数</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;                        <span class="comment">// 搜索结果</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;                     <span class="comment">// 搜索命中总数信息</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1000</span>,               <span class="comment">// 命中总数</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span>             <span class="comment">// 取值eq(等于)/gte(大于等于)，表示hits.total.value与实际的搜索命中数量的关系</span></span><br><span class="line">                                    <span class="comment">// 如果搜索结果很多，超过一定数量后，通常就不再统计，只是笼统地表示为：搜索结果超过XXXX个。hits.total的准确性由请求参数track_total_hits控制，当track_total_hits为true时，搜索时将精确地跟踪总命中数(“relationship”:“eq”)。track_total_hits默认值为10,000，意味着总命中数可以精确地跟踪到10000个文档，如果超过10000，会表示为超过10000个结果</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="literal">null</span>,             <span class="comment">// hits._score 与 max_score – 分数是衡量文档与搜索条件匹配程度的一个指标。分数越高，文档越相关，分数越低，文档越不相关。并不总是需要生成分数，需不需要Elasticsearch会自动判断，以避免计算无用的分数。</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [                      <span class="comment">// 实际的搜索结果数组(默认为前10个文档)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;bank&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> : <span class="number">0</span>,</span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> : <span class="number">16623</span>,</span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> : <span class="string">&quot;Bradshaw&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> : <span class="string">&quot;Mckenzie&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">29</span>,</span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> : <span class="string">&quot;F&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;address&quot;</span> : <span class="string">&quot;244 Columbus Place&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> : <span class="string">&quot;Euron&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;email&quot;</span> : <span class="string">&quot;bradshawmckenzie@euron.com&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;city&quot;</span> : <span class="string">&quot;Hobucken&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;state&quot;</span> : <span class="string">&quot;CO&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [                <span class="comment">// 结果排序键(如果按分数排序，则忽略)</span></span><br><span class="line">          <span class="number">0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-DSL-Query-domain-specific-language"><a href="#Query-DSL-Query-domain-specific-language" class="headerlink" title="Query DSL(Query domain-specific language)"></a>Query DSL(Query domain-specific language)</h2><p>Elasticsearch提供了一种json风格的查询语言</p><h3 id="sort-from-size-排序-分页"><a href="#sort-from-size-排序-分页" class="headerlink" title="sort, from, size 排序,分页"></a>sort, from, size 排序,分页</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&quot;localhost:9200/bank/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;sort&quot;: [</span></span><br><span class="line"><span class="string">    &#123;&quot;account_number&quot;: &quot;asc&quot;&#125;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  &quot;from&quot;:5,</span></span><br><span class="line"><span class="string">  &quot;size&quot;:5</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>query 表示这次查询的定义<br>match_all 表示查询类型-匹配所有文档<br>sort 指定排序<br>from 参数(基于0)指定从哪个文档序号开始(默认0)，size参数指定返回多少个文档(默认10),这两个参数对于搜索结果分页非常有用</p><h3 id="source-指定返回的字段"><a href="#source-指定返回的字段" class="headerlink" title="_source 指定返回的字段"></a>_source 指定返回的字段</h3><p>默认情况下， 搜索结果中包含了完整的json文档( _source 字段),如果不希望返回源文档全部内,可以设置要返回的字段</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;:&#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span></span><br><span class="line"><span class="string">  &quot;_source&quot;:[&quot;account_number&quot;, &quot;balance&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="match-all-匹配所有文档"><a href="#match-all-匹配所有文档" class="headerlink" title="match_all 匹配所有文档"></a>match_all 匹配所有文档</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&quot;localhost:9200/bank/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="match-匹配查询"><a href="#match-匹配查询" class="headerlink" title="match 匹配查询"></a>match 匹配查询</h3><h4 id="返回-account-number-为-20-的所有账户"><a href="#返回-account-number-为-20-的所有账户" class="headerlink" title="返回 account_number 为 20 的所有账户"></a>返回 account_number 为 20 的所有账户</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;match&quot;: &#123;&quot;account_number&quot;: 20&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="返回-address-包含-mill-的所有账户"><a href="#返回-address-包含-mill-的所有账户" class="headerlink" title="返回 address 包含 mill 的所有账户"></a>返回 address 包含 mill 的所有账户</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;match&quot;: &#123;&quot;address&quot;: &quot;mill&quot;&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="返回-address-包含-mill-或-lane-的所有账户"><a href="#返回-address-包含-mill-或-lane-的所有账户" class="headerlink" title="返回 address 包含 mill 或 lane 的所有账户"></a>返回 address 包含 mill 或 lane 的所有账户</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;match&quot;: &#123;&quot;address&quot;: &quot;mill lane&quot;&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="match-phrase-匹配整个短语"><a href="#match-phrase-匹配整个短语" class="headerlink" title="match_phrase 匹配整个短语"></a>match_phrase 匹配整个短语</h3><h4 id="返回-address-包含-“mill-lane”-的所有账户"><a href="#返回-address-包含-“mill-lane”-的所有账户" class="headerlink" title="返回 address 包含 “mill lane” 的所有账户"></a>返回 address 包含 “mill lane” 的所有账户</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;match_phrase&quot;: &#123;&quot;address&quot;: &quot;mill lane&quot;&#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="bool-布尔查询"><a href="#bool-布尔查询" class="headerlink" title="bool 布尔查询"></a>bool 布尔查询</h3><p>布尔查询使用布尔逻辑，将小查询组合成大查询</p><h4 id="bool-must-包含两个-match-逻辑与"><a href="#bool-must-包含两个-match-逻辑与" class="headerlink" title="bool must 包含两个 match,逻辑与"></a>bool must 包含两个 match,逻辑与</h4><p>返回地址中包含 mill 且也包含 lane 的账户<br>must 下所有匹配条件为真，文档才视为匹配</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;must&quot;: [</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;mill&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;lane&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="bool-should-包含两个-match-逻辑或"><a href="#bool-should-包含两个-match-逻辑或" class="headerlink" title="bool should 包含两个 match,逻辑或"></a>bool should 包含两个 match,逻辑或</h4><p>返回地址中包含 mill 或也包含 lane 的账户<br>must 下任意一个匹配条件为真，文档就视为匹配</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;should&quot;: [</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;mill&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;lane&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="bool-must-not包含两个-match-逻辑与非"><a href="#bool-must-not包含两个-match-逻辑与非" class="headerlink" title="bool must_not包含两个 match,逻辑与非"></a>bool must_not包含两个 match,逻辑与非</h4><p>返回地址中既不包含“mill”也不包含“lane”的帐户<br>bool must_not子句包含的匹配条件全部为假，文档将被视为匹配</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;must_not&quot;: [</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;mill&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;lane&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="bool-查询中同时组合-must、should和must-not-解决should-不生效问题"><a href="#bool-查询中同时组合-must、should和must-not-解决should-不生效问题" class="headerlink" title="bool 查询中同时组合 must、should和must_not (解决should 不生效问题)"></a>bool 查询中同时组合 must、should和must_not (解决should 不生效问题)</h4><p>当使用should查询时，如果包含了must或者filter查询，那么should的查询语句就不是或者的意思了,而是有或者没有都行的含义。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 解决方法 1: 使用 minimum_should_match</span></span><br><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;must&quot;: [</span></span><br><span class="line"><span class="string">        &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;40&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">      ],</span></span><br><span class="line"><span class="string">      &quot;must_not&quot;: [</span></span><br><span class="line"><span class="string">        &#123; &quot;match&quot;: &#123; &quot;state&quot;: &quot;ID&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">      ],</span></span><br><span class="line"><span class="string">      &quot;should&quot;: [</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;Jackson&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;Suydam&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">      ],</span></span><br><span class="line"><span class="string">      &quot;minimum_should_match&quot;: 1</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">## 解决方法 2: 应先满足must，然后在must的基础上进行should查询,即转换成复杂的组合查询，就是满足一定的条件下，再满足条件1或者满足条件2或者满足条件3</span></span><br><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;must&quot;: [</span></span><br><span class="line"><span class="string">        &#123;  </span></span><br><span class="line"><span class="string">          // 先满足前置条件</span></span><br><span class="line"><span class="string">          &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;must&quot;: [</span></span><br><span class="line"><span class="string">              &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;40&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">            &quot;must_not&quot;: [</span></span><br><span class="line"><span class="string">              &#123; &quot;match&quot;: &#123; &quot;state&quot;: &quot;ID&quot; &#125; &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;, </span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          // 再满足后置条件</span></span><br><span class="line"><span class="string">          &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;should&quot;: [</span></span><br><span class="line"><span class="string">              &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;Jackson&quot;&#125;&#125;,</span></span><br><span class="line"><span class="string">              &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;Suydam&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h2><p>_score(分数)字段是衡量文档与搜索条件匹配程度的一个指标。分数越高，文档越相关，分数越低，文档越不相关。并不总是需要生成分数，需不需要Elasticsearch会自动判断，以避免计算无用的分数。<br>布尔查询还支持filter子句，用于设置过滤条件。过滤条件不影响文档的相关性分数。</p><h3 id="返回-balance-在-20000-30000-之间的账户"><a href="#返回-balance-在-20000-30000-之间的账户" class="headerlink" title="返回 balance 在 20000-30000 之间的账户"></a>返回 balance 在 20000-30000 之间的账户</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;bool&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;must&quot;: &#123; &quot;match_all&quot;: &#123;&#125;&#125;,</span></span><br><span class="line"><span class="string">      &quot;filter&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;range&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;balance&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;gte&quot;: 20000,</span></span><br><span class="line"><span class="string">            &quot;lte&quot;: 30000</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="aggs-聚合"><a href="#aggs-聚合" class="headerlink" title="aggs 聚合"></a>aggs 聚合</h2><p>聚合提供了对数据进行分组、统计的能力，类似于SQL中GROUP by和SQL聚合函数。在Elasticsearch中，可以同时返回搜索结果及其聚合计算结果，这是非常强大和高效的。</p><h3 id="terms-账户按所在州分组，统计每组账户数量，然后返回前10条目"><a href="#terms-账户按所在州分组，统计每组账户数量，然后返回前10条目" class="headerlink" title="terms 账户按所在州分组，统计每组账户数量，然后返回前10条目"></a>terms 账户按所在州分组，统计每组账户数量，然后返回前10条目</h3><p>类似sql中的 <code>SELECT state, COUNT(*) FROM bank GROUP BY state ORDER BY COUNT(*) DESC LIMIT 10;</code></p><p>注: size=0 表示不显示搜索结果，我们只想看到聚合结果</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;size&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;aggs&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;group_by_state&quot;: &#123;       // group_by_state 不是关键字，只是结果展示的名称</span></span><br><span class="line"><span class="string">      &quot;terms&quot;: &#123;              // 这个才是关键字</span></span><br><span class="line"><span class="string">        &quot;field&quot;: &quot;state.keyword&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="terms-avg-所有账户按州计算平均账户余额-返回前10条目-按账户数量降序排列"><a href="#terms-avg-所有账户按州计算平均账户余额-返回前10条目-按账户数量降序排列" class="headerlink" title="terms, avg 所有账户按州计算平均账户余额,返回前10条目,按账户数量降序排列"></a>terms, avg 所有账户按州计算平均账户余额,返回前10条目,按账户数量降序排列</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;size&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;aggs&quot;: &#123;                   // 先按照州聚合</span></span><br><span class="line"><span class="string">    &quot;group_by_state&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;terms&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;field&quot;: &quot;state.keyword&quot;,</span></span><br><span class="line"><span class="string">        &quot;order&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;average_balance&quot;: &quot;desc&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;aggs&quot;: &#123;               // 再计算每个州的平均账户余额</span></span><br><span class="line"><span class="string">        &quot;average_balance&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;avg&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;field&quot;: &quot;balance&quot;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="range-term-avg-先按照年龄段分组，然后按性别分组，统计每个年龄等级，每种性别的平均账户余额"><a href="#range-term-avg-先按照年龄段分组，然后按性别分组，统计每个年龄等级，每种性别的平均账户余额" class="headerlink" title="range, term, avg 先按照年龄段分组，然后按性别分组，统计每个年龄等级，每种性别的平均账户余额"></a>range, term, avg 先按照年龄段分组，然后按性别分组，统计每个年龄等级，每种性别的平均账户余额</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/bank/_search?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;size&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;aggs&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;group_by_age&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;range&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;field&quot;: &quot;age&quot;,</span></span><br><span class="line"><span class="string">        &quot;ranges&quot;: [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            &quot;from&quot;: 20,</span></span><br><span class="line"><span class="string">            &quot;to&quot;: 30</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            &quot;from&quot;: 30,</span></span><br><span class="line"><span class="string">            &quot;to&quot;: 40</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            &quot;from&quot;: 40,</span></span><br><span class="line"><span class="string">            &quot;to&quot;: 50</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &quot;aggs&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;group_by_gender&quot;: &#123;</span></span><br><span class="line"><span class="string">          &quot;terms&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;field&quot;: &quot;gender.keyword&quot;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &quot;aggs&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;average_balance&quot;: &#123;</span></span><br><span class="line"><span class="string">              &quot;avg&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;field&quot;: &quot;balance&quot;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.qikegu.com/docs/3077">Elasticsearch 搜索数据</a><br><a href="https://blog.csdn.net/weixin_44993313/article/details/105905735">ES多条件查询must和should不能同时生效问题</a><br><a href="https://blog.csdn.net/JineD/article/details/111997205">es bool多条件查询should和must同时使用注意</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;批量导入数据&quot;&gt;&lt;a href=&quot;#批量导入数据&quot; class=&quot;headerlink&quot; title=&quot;批量导入数据&quot;&gt;&lt;/a&gt;批量导入数据&lt;/h2&gt;&lt;p&gt;将 account.json 的数据加载到 elastic 中&lt;br&gt;数据类似如下(2条)&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="Elasticsearch" scheme="https://altman-xu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch-API</title>
    <link href="https://altman-xu.github.io/2021/07/21/Elasticsearch-API/"/>
    <id>https://altman-xu.github.io/2021/07/21/Elasticsearch-API/</id>
    <published>2021-07-21T03:00:35.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令形式"><a href="#命令形式" class="headerlink" title="命令形式"></a>命令形式</h2><h3 id="API格式"><a href="#API格式" class="headerlink" title="API格式"></a>API格式</h3><p>在 kibana 中执行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/health?v</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20210721155158.png"></p><h3 id="curl访问API"><a href="#curl访问API" class="headerlink" title="curl访问API"></a>curl访问API</h3><p>在 terminal 中执行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&quot;localhost:9200/_cat/shards?v&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20210721155333.png"></p><h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><h3 id="获取健康信息"><a href="#获取健康信息" class="headerlink" title="获取健康信息"></a>获取健康信息</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## output</span></span><br><span class="line">ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">127.0.0.1           59          97   7    1.98                  dimr      *      C02CF1LYMD6Q</span><br></pre></td></tr></table></figure><h3 id="获取分片信息"><a href="#获取分片信息" class="headerlink" title="获取分片信息"></a>获取分片信息</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&quot;localhost:9200/_cat/shards?v&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">index    shard prirep state      docs store ip        node</span><br><span class="line">customer 0     p      STARTED       0  208b 127.0.0.1 C02CF1LYMD6Q</span><br><span class="line">customer 0     r      UNASSIGNED</span><br></pre></td></tr></table></figure><h3 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&quot;localhost:9200/_cat/nodes?v&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">epoch      timestamp cluster            status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1626836684 03:04:44  elasticsearch_brew yellow          1         1      2   2    0    0        1             0                  -                 66.7%</span><br></pre></td></tr></table></figure><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><blockquote><p>命令末尾追加pretty,可以漂亮地打印JSON响应(如果有的话)</p></blockquote><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT <span class="string">&#x27;localhost:9200/customer?pretty&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;shards_acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;index&quot;</span> : <span class="string">&quot;customer&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><blockquote><p>显示所有索引信息, 若索引太多，建议重定向到文件中，避免终端显示不完整 <code>curl -XGET &#39;localhost:9200/_cat/indices?v&#39; &gt; tmp.log</code></p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/_cat/indices?v&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   customer 1ROsx5JQTluas2hEGLh0Qg   1   1          0            0       208b           208b</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE <span class="string">&#x27;localhost:9200/customer?pretty&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;acknowledged&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><p>Elasticsearch并不要求，先要有索引，才能将文档编入索引。创建文档时，如果指定索引不存在，将自动创建</p><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>将一个客户文档放到 customer 索引中, ID 为1</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##API:</span></span><br><span class="line">PUT /customer/_doc/1?pretty</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;John Doe&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## curl命令访问API:</span></span><br><span class="line">curl -XPUT <span class="string">&quot;localhost:9200/customer/_doc/1?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;John Doe&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>在 customer 索引中查询 文档 id 为 1 的数据</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">&quot;localhost:9200/customer/_doc/1?pretty&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 0,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><blockquote><p>Elasticsearch实际上并没有在底层执行就地更新，而是先删除旧文档，再添加新文档</p></blockquote><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>将 customer 索引中文档 ID 为 1 的 name 更改为 “Jane Doe”</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&quot;localhost:9200/customer/_update/1?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;doc&quot;: &#123;&quot;name&quot;: &quot;Jane Doe&quot;&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 再次查询，可以看到数据已经修改了</span></span><br><span class="line">curl -XGET <span class="string">&quot;localhost:9200/customer/_doc/1?pretty&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Jane Doe&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h4><p>把文档(ID为1)中的name字段更改为 “Altman”，再添加一个年龄字段: age</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&quot;localhost:9200/customer/_update/1?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;doc&quot;: &#123;&quot;name&quot;: &quot;Altman&quot;, &quot;age&quot;: 18&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 再次查询，可以看到数据已经修改了</span></span><br><span class="line">curl -XGET <span class="string">&quot;localhost:9200/customer/_doc/1?pretty&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Altman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : 18</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h4><p>使用脚本将年龄增加5岁</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&quot;localhost:9200/customer/_update/1?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;script&quot; : &quot;ctx._source.age += 5&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 4,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 再次查询，可以看到数据已经修改了</span></span><br><span class="line">curl -XGET <span class="string">&quot;localhost:9200/customer/_doc/1?pretty&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 4,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 3,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Altman&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : 23</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>删除文档 ID 为 2 的数据，注 该 ID 不存在</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE <span class="string">&quot;localhost:9200/customer/_doc/2?pretty&quot;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">  <span class="string">&quot;result&quot;</span> : <span class="string">&quot;not_found&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_seq_no&quot;</span> : 4,</span><br><span class="line">  <span class="string">&quot;_primary_term&quot;</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><p>先将 customer 索引删除，重建，然后执行下面</p><blockquote><p>某个操作失败不会导致批量API执行中断，剩下的操作将继续执行。当_bulk API返回时，它将为每个操作提供一个状态(与发送操作的顺序相同)，以便检查某个特定操作是否失败。</p></blockquote><h3 id="在一个批量操作中-创建两个文档"><a href="#在一个批量操作中-创建两个文档" class="headerlink" title="在一个批量操作中,创建两个文档"></a>在一个批量操作中,创建两个文档</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&#x27;localhost:9200/customer/_bulk?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;: &quot;John, Doe&quot;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;name&quot;: &quot;Jane, Doe&quot;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 231,</span><br><span class="line">  <span class="string">&quot;errors&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;items&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">          <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">          <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;_seq_no&quot;</span> : 0,</span><br><span class="line">        <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_version&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">          <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">          <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;_seq_no&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 查看这个索引里面的所有数据</span></span><br><span class="line">curl -XGET <span class="string">&#x27;localhost:9200/customer/_search?q=*&amp;pretty&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 97,</span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">    <span class="string">&quot;skipped&quot;</span> : 0,</span><br><span class="line">    <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 2,</span><br><span class="line">      <span class="string">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;max_score&quot;</span> : 1.0,</span><br><span class="line">    <span class="string">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 1.0,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span> : <span class="string">&quot;John, Doe&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span> : 1.0,</span><br><span class="line">        <span class="string">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Jane, Doe&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在一个批量操作中-更新第一个文档-删除第二个文档"><a href="#在一个批量操作中-更新第一个文档-删除第二个文档" class="headerlink" title="在一个批量操作中,更新第一个文档,删除第二个文档"></a>在一个批量操作中,更新第一个文档,删除第二个文档</h3><blockquote><p>对于delete操作，只需提供被删除文档的ID即可</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&#x27;localhost:9200/customer/_bulk?pretty&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;update&quot;: &#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;doc&quot;: &#123;&quot;name&quot;: &quot;Johe Doe becomes Jane Doe&quot; &#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&quot;delete&quot;: &#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">## output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;took&quot;</span> : 52,</span><br><span class="line">  <span class="string">&quot;errors&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;items&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;update&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_version&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">          <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">          <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;_seq_no&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> : 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;delete&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span> : <span class="string">&quot;customer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_version&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;result&quot;</span> : <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;total&quot;</span> : 2,</span><br><span class="line">          <span class="string">&quot;successful&quot;</span> : 1,</span><br><span class="line">          <span class="string">&quot;failed&quot;</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;_seq_no&quot;</span> : 3,</span><br><span class="line">        <span class="string">&quot;_primary_term&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> : 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.qikegu.com/docs/3051">Elasticsearch 使用集群</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令形式&quot;&gt;&lt;a href=&quot;#命令形式&quot; class=&quot;headerlink&quot; title=&quot;命令形式&quot;&gt;&lt;/a&gt;命令形式&lt;/h2&gt;&lt;h3 id=&quot;API格式&quot;&gt;&lt;a href=&quot;#API格式&quot; class=&quot;headerlink&quot; title=&quot;API格式&quot;&gt;</summary>
      
    
    
    
    
    <category term="Elasticsearch" scheme="https://altman-xu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch-Install</title>
    <link href="https://altman-xu.github.io/2021/07/21/Elasticsearch-Install/"/>
    <id>https://altman-xu.github.io/2021/07/21/Elasticsearch-Install/</id>
    <published>2021-07-21T02:50:09.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="brew-单机安装"><a href="#brew-单机安装" class="headerlink" title="brew 单机安装"></a>brew 单机安装</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install elasticsearch</span><br><span class="line">brew services start elasticsearch</span><br><span class="line">brew services list</span><br></pre></td></tr></table></figure><h2 id="单机安装-插件"><a href="#单机安装-插件" class="headerlink" title="单机安装 + 插件"></a>单机安装 + 插件</h2><ol><li>下载 <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a> 得到 elasticsearch-7.12.0-darwin-x86_64.tar.gz</li><li>解压压缩包，得到 elasticsearch-7.12.0</li><li>cd /Users/zhihua.xu/ALTMAN_WORKSPACE/distributed_workspace/elasticsearch-7.12.0/bin   以下命令都是在此目录下执行</li><li>执行 ./elasticsearch 即可启动本机 elasticsearch 服务， 通过 web 页面查看服务 <a href="http://localhost:9200/">http://localhost:9200</a></li><li>查看本机已安装的elasticsearch插件  ./elasticsearch-plugin list</li><li>安装插件:   ./elasticsearch-plugin install analysis-icu</li><li>重启 elasticsearch 服务， 通过web页面查看插件:  <a href="http://localhost:9200/_cat/plugins">http://localhost:9200/_cat/plugins</a></li></ol><h2 id="集群安装"><a href="#集群安装" class="headerlink" title="集群安装"></a>集群安装</h2><ol><li>下载 <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a> 得到 elasticsearch-7.12.0-darwin-x86_64.tar.gz</li><li>解压压缩包，得到 elasticsearch-7.12.0</li><li>cd /Users/zhihua.xu/ALTMAN_WORKSPACE/distributed_workspace/elasticsearch-7.12.0/bin   以下命令都是在此目录下执行</li></ol><p>启动命令:<br>./elasticsearch -E node.name=node1 -E cluster.name=altman_cluster_test -E path.data=node1_data -d<br>./elasticsearch -E node.name=node2 -E cluster.name=altman_cluster_test -E path.data=node2_data -d<br>./elasticsearch -E node.name=node3 -E cluster.name=altman_cluster_test -E path.data=node3_data -d</p><p>命令说明:  node.name 指定节点名字； cluster.name 指定集群名字； path.data 指定文件名字； -d 后台运行<br>打开浏览器验证 <a href="http://localhost:9200/">http://localhost:9200/</a> 里面可以看到 cluster_name 信息<br><a href="http://localhost:9200/_cat/nodes">http://localhost:9200/_cat/nodes</a> 查看集群节点信息</p><p>删除进程<br>ps | grep elasticsearch<br>kill pid</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.qikegu.com/docs/3049">Elasticsearch 安装</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;brew-单机安装&quot;&gt;&lt;a href=&quot;#brew-单机安装&quot; class=&quot;headerlink&quot; title=&quot;brew 单机安装&quot;&gt;&lt;/a&gt;brew 单机安装&lt;/h2&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="Elasticsearch" scheme="https://altman-xu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch-Concept</title>
    <link href="https://altman-xu.github.io/2021/07/21/Elasticsearch-Concept/"/>
    <id>https://altman-xu.github.io/2021/07/21/Elasticsearch-Concept/</id>
    <published>2021-07-21T02:41:50.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="近实时-Near-Realtime-NRT"><a href="#近实时-Near-Realtime-NRT" class="headerlink" title="近实时(Near Realtime / NRT)"></a>近实时(Near Realtime / NRT)</h2><p>Elasticsearch是一个近实时的搜索平台，从生成文档索引到文档成为可搜索，有一个轻微的延迟(通常是一秒钟)。</p><h2 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群(Cluster)"></a>集群(Cluster)</h2><p>集群是一个或多个节点(服务器)的集合。集群中的节点一起存储数据，对外提供搜索功能。集群由一个唯一的名称标识，该名称默认是“elasticsearch”。集群名称很重要，节点都是通过集群名称加入集群。</p><p>集群不要重名，取名一般要有明确意义，否则会引起混乱。例如，开发、测试和生产集群的名称可以使用logging-dev、logging-test和logging-prod。</p><p>集群节点数不受限制，可以只有一个节点。</p><h2 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点(Node)"></a>节点(Node)</h2><p>节点是一个服务器，属于某个集群。节点存储数据，参与集群的索引和搜索功能。与集群一样，节点也是通过名称来标识的。默认情况下，启动时会分配给节点一个UUID（全局惟一标识符）作为名称。如有需要，可以给节点取名，通常取名时应考虑能方便识别和管理。</p><p>默认情况下，节点加入名为elasticsearch的集群，通过设置节点的集群名，可加入指定集群。</p><h2 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h2><p>索引是具有某种特征的文档集合，相当于一本书的目录。例如，可以为客户数据建立索引，为订单数据建立另一个索引。索引由名称标识(必须全部为小写)，可以使用该名称，对索引中的文档进行建立索引、搜索、更新和删除等操作。</p><p>一个集群中，索引数量不受限制。</p><h2 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h2><p>文档是可以建立索引的基本信息单元，相当于书的具体章节。例如，可以为单个客户创建一个文档，为单个订单创建另一个文档。文档用JSON (JavaScript对象表示法)表示。在索引中，理论上可以存储任意数量的文档。</p><h2 id="分片与副本-Shards-amp-Replicas"><a href="#分片与副本-Shards-amp-Replicas" class="headerlink" title="分片与副本(Shards &amp; Replicas)"></a>分片与副本(Shards &amp; Replicas)</h2><p>索引可能存储大量数据，数据量可能超过单个节点的硬件限制。例如，一个索引包含10亿个文档，将占用1TB的磁盘空间，单个节点的磁盘放不下。</p><p>Elasticsearch提供了索引分片功能。创建索引时，可以定义所需的分片数量。每个分片本身都是一个功能齐全，独立的“索引”，可以托管在集群中的任何节点上。</p><p>分片之所以重要，主要有2个原因:</p><ol><li>允许水平切分内容，以便内容可以存储到普通的服务器中</li><li>允许跨分片操作（如查询时，查询多个分片），提高性能/吞吐量</li></ol><p>分片如何部署、如何跨片搜索完全由Elasticsearch管理，对外是透明的。</p><p>网络环境随时可能出现故障，如果某个分片/节点由于某种原因离线或消失，那么使用故障转移机制是非常有用的，强烈建议使用这种机制。为此，Elasticsearch允许为分片创建副本。</p><p>副本之所以重要，主要有2个原因:</p><ol><li>在分片/节点失败时提供高可用性。因此，原分片与副本不应放在同一个节点上。</li><li>扩展吞吐量，因为可以在所有副本上并行执行搜索。</li></ol><p>总而言之，索引可以分片，索引分片可以创建副本。复制后，每个索引将具有主分片与副本分片。</p><p>创建索引时，可以为每个索引定义分片和副本的数量。之后，还可以随时动态更改副本数量。您可以使用 <code>_shrink</code> 和 <code>_split</code> api更改现有索引的分片数量，但动态修改副本数量相当麻烦，最好还是预先计划好分片数量。</p><p>默认情况下，Elasticsearch中的每个索引分配一个主分片和一个副本。如果集群中有两个节点，就可以将索引主分片部署在一个节点，副本分片放在另一个节点，提高可用性。</p><p>每个Elasticsearch分片都是一个Lucene索引。Lucene索引中的文档数量有限制，在LUCENE-5843中，极限是2,147,483,519(= 整数的最大值 – 128)个文档。可以使用 <code>curl -XGET &quot;localhost:9200/_cat/shards&quot;</code> API监视分片大小。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20210721104845.png" alt="es流程图"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.qikegu.com/docs/3047">Elasticsearch 基本概念</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;近实时-Near-Realtime-NRT&quot;&gt;&lt;a href=&quot;#近实时-Near-Realtime-NRT&quot; class=&quot;headerlink&quot; title=&quot;近实时(Near Realtime / NRT)&quot;&gt;&lt;/a&gt;近实时(Near Realtime / </summary>
      
    
    
    
    
    <category term="Elasticsearch" scheme="https://altman-xu.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Assembly-Instructions</title>
    <link href="https://altman-xu.github.io/2021/06/30/Assembly-Instructions/"/>
    <id>https://altman-xu.github.io/2021/06/30/Assembly-Instructions/</id>
    <published>2021-06-30T01:59:21.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th><th>字节</th><th>描述</th></tr></thead><tbody><tr><td>b</td><td>1 bytes</td><td>字节</td></tr><tr><td>w</td><td>2 bytes</td><td>字</td></tr><tr><td>l</td><td>4 bytes</td><td>双字</td></tr><tr><td>q</td><td>8 bytes</td><td>四字</td></tr></tbody></table><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>MOV S,D</td><td>D&lt;-S</td><td>传送</td></tr><tr><td>movb</td><td></td><td>传送字节</td></tr><tr><td>movw</td><td></td><td>传送字</td></tr><tr><td>movb</td><td></td><td>传送双字</td></tr><tr><td>movq</td><td></td><td>传送四字</td></tr><tr><td>movabsq I,R</td><td>R&lt;-I</td><td>传送绝对的四字</td></tr></tbody></table><p>MOV 源和目的类型的5种可能组合</p><table><thead><tr><th>指令</th><th>说明</th><th>字节</th></tr></thead><tbody><tr><td>movl $0x4050,%eax</td><td>Immediate–Register</td><td>4 bytes</td></tr><tr><td>movw %bp,%sp</td><td>Register–Register</td><td>2 bytes</td></tr><tr><td>movb (%rdi,%rcx),%al</td><td>Memory–Register</td><td>1 bytes</td></tr><tr><td>movb $-17,(%rsp)</td><td>Immediate–Memory</td><td>1 bytes</td></tr><tr><td>movq %rax,-12(%rbp)</td><td>Register–Memory</td><td>8 bytes</td></tr></tbody></table><table><thead><tr><th>指令</th><th>效果</th><th>描述</th></tr></thead><tbody><tr><td>leaq S,D</td><td>D &lt;-&amp;S</td><td>加载有效地址</td></tr><tr><td>–</td><td>–</td><td>–</td></tr><tr><td>INC D</td><td>D &lt;- D+1</td><td>加1</td></tr><tr><td>DEC D</td><td>D &lt;- D-1</td><td>减1</td></tr><tr><td>NEG D</td><td>D &lt;- -D</td><td>取负</td></tr><tr><td>NOT D</td><td>D &lt;- ~D</td><td>取补</td></tr><tr><td>–</td><td>–</td><td>–</td></tr><tr><td>ADD S,D</td><td>D &lt;- D+S</td><td>加</td></tr><tr><td>SUB S,D</td><td>D &lt;- D-S</td><td>减</td></tr><tr><td>IMUL S,D</td><td>D &lt;- D*S</td><td>乘</td></tr><tr><td>XOR S,D</td><td>D &lt;- D~S</td><td>异或</td></tr><tr><td>OR S,D</td><td>D &lt;- D</td><td>S</td></tr><tr><td>AND S,D</td><td>D &lt;- D&amp;S</td><td>与</td></tr><tr><td>–</td><td>–</td><td>–</td></tr><tr><td>SAL k,D</td><td>D &lt;- D &lt;&lt;k</td><td>左移</td></tr><tr><td>SHL k,D</td><td>D &lt;- D &lt;&lt;k</td><td>左移(等同于SAL)</td></tr><tr><td>SAR k,D</td><td>D &lt;- D &gt;&gt;ak</td><td>算术右移</td></tr><tr><td>SHR k,D</td><td>D &lt;- D &gt;&gt;lk</td><td>逻辑右移</td></tr></tbody></table><h2 id="CMP-TEST"><a href="#CMP-TEST" class="headerlink" title="CMP TEST"></a>CMP TEST</h2><p>cmp 和 test 指令不修改任何寄存器的值，只设置条件码</p><ol><li>cmp 根据两个操作数之差来设置条件码，除了只设置条件码而不更新目的寄存器外，cmp指令与sub指令的行为是一样的。如果两个操作数相等，这些指令会将零标志设置为 1，而其他的标志可以用来确定两个操作数之间的大小关系</li><li>test 除了只设置条件码而不更新目的寄存器外，指令与 and 指令是一样的。 典型用法是两个操作数是一样的(例如 testq %rax,%rax 用来检查 %rax是负数、零还是正数)，或其中的一个操作数是一个掩码，用来只是哪些位应该被测试</li></ol><table><thead><tr><th>指令</th><th>基于</th><th>描述</th></tr></thead><tbody><tr><td>CMP S1, S2</td><td>S2-S1</td><td>比较</td></tr><tr><td>cmpb</td><td></td><td>比较字节</td></tr><tr><td>cmpw</td><td></td><td>比较字</td></tr><tr><td>cmpl</td><td></td><td>比较双字</td></tr><tr><td>cmpq</td><td></td><td>比较四字</td></tr><tr><td>–</td><td>–</td><td>–</td></tr><tr><td>TEST S1, S2</td><td>S2&amp;S1</td><td>测试</td></tr><tr><td>testb</td><td></td><td>测试字节</td></tr><tr><td>testw</td><td></td><td>测试字</td></tr><tr><td>testl</td><td></td><td>测试双字</td></tr><tr><td>testq</td><td></td><td>测试四字</td></tr></tbody></table><h2 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h2><p>程序状态字PSW（Program State Word）</p><p>除了整数寄存器，CPU还维护一组单个位的条件码寄存器，他们描述了最近的算术或逻辑操作的属性。<br>可以检测这些寄存器来执行条件分支指令</p><table><thead><tr><th>31···</th><th>22</th><th>21</th><th>20</th><th>19</th><th>18</th><th>17</th><th>16</th><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td></td><td></td><td></td><td>ID</td><td>VIP</td><td>VIF</td><td>AC</td><td>VM</td><td>O</td><td>RF</td><td>NT</td><td>IOPL</td><td>OF</td><td>DF</td><td>IF</td><td>TF</td><td>SF</td><td>ZF</td><td>x</td><td>AF</td><td>x</td><td>PF</td><td>x</td><td>CF</td></tr></tbody></table><table><thead><tr><th>条件码</th><th></th><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>CF</td><td>Carry Flag</td><td>进位标志</td><td>最近的操作使最高位产生了进位，可用来检查无符号操作的溢出</td></tr><tr><td>ZF</td><td>Zero Flag</td><td>零标志</td><td>最近的操作得出的结果为0</td></tr><tr><td>SF</td><td>Sign flag</td><td>符号标志</td><td>最近的操作得到的结果为负数</td></tr><tr><td>OF</td><td>Overflow</td><td>溢出标志</td><td>最近的操作导致一个补码溢出–正溢出或负溢出</td></tr><tr><td>PF</td><td>Panty Flag</td><td>偶标志</td><td></td></tr><tr><td>AF</td><td>Auxiliary</td><td>半进/借位</td><td></td></tr><tr><td>TF</td><td>Trap Flag</td><td>陷阱</td><td></td></tr><tr><td>IF</td><td>Interrupt</td><td>允许中断</td><td></td></tr><tr><td>DF</td><td>Direction</td><td>增量方向</td><td></td></tr><tr><td>VIF</td><td></td><td>虚拟中断标志位</td><td></td></tr><tr><td>VP</td><td></td><td>虚拟中断待决标志位</td><td></td></tr><tr><td>IOPL</td><td></td><td>IO特权级别</td><td></td></tr></tbody></table><p>条件码同城不会直接读取，常用的使用方法有三种</p><ol><li>(set指令) 根据条件码的某种组合，讲一个字节设置为0或1</li><li>(jump指令) 可以条件跳转到程序的某个其他地方</li><li>(cmove指令) 可以有条件的传送数据</li></ol><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><p>set指令，每条指令根据条件码的组合，将一个字节设置为0或1。<br>有些指令有同义名，也就是同一条机器指令有别的名字</p><table><thead><tr><th>指令</th><th>同义名</th><th>效果</th><th>设置条件</th></tr></thead><tbody><tr><td>sete D</td><td>setz</td><td>D &lt;- ZF</td><td>相等/零</td></tr><tr><td>setne D</td><td>setnz</td><td>D &lt;- ~ZF</td><td>不等/非零</td></tr><tr><td>sets D</td><td></td><td>D &lt;- SF</td><td>负数</td></tr><tr><td>setns D</td><td></td><td>D &lt;- ~SF</td><td>非负数</td></tr><tr><td>setg D</td><td>setnle</td><td>D &lt;- <del>(SF^OF)&amp;</del>ZF</td><td>大于(有符号&gt;)</td></tr><tr><td>setge D</td><td>setnl</td><td>D &lt;- ~(SF^OF)</td><td>大于等于(有符号&gt;=)</td></tr><tr><td>setl D</td><td>setnge</td><td>D &lt;- SF^OF</td><td>小于(有符号&lt;)</td></tr><tr><td>setle D</td><td>setng</td><td>D &lt;- (SF^OF)</td><td>ZF</td></tr><tr><td>seta D</td><td>setnbe</td><td>D &lt;- <del>CF&amp;</del>ZF</td><td>超过(无符号&gt;)</td></tr><tr><td>setae D</td><td>setnb</td><td>D &lt;- ~CF</td><td>超过或相等(无符号&gt;=)</td></tr><tr><td>setb D</td><td>setnae</td><td>D &lt;- CF</td><td>低于(无符号&lt;)</td></tr><tr><td>setbe D</td><td>setna</td><td>D &lt;- CF|ZF</td><td>低于或相等(无符号&lt;=)</td></tr></tbody></table><h3 id="JUMP"><a href="#JUMP" class="headerlink" title="JUMP"></a>JUMP</h3><p>当条件满足时，这些指令会调整到一条带标号的目的地</p><table><thead><tr><th>指令</th><th>同义名</th><th>跳转条件</th><th>描述</th></tr></thead><tbody><tr><td>jmp Label</td><td></td><td>1</td><td>直接跳转</td></tr><tr><td>jmp *Operand</td><td></td><td>1</td><td>间接跳转</td></tr><tr><td>je Label</td><td>jz</td><td>ZF</td><td>相等/零</td></tr><tr><td>jne Label</td><td>jnz</td><td>-ZF</td><td>不相等/非零</td></tr><tr><td>js Label</td><td></td><td>SF</td><td>负数</td></tr><tr><td>jns Label</td><td></td><td>~SF</td><td>非负数</td></tr><tr><td>jg Label</td><td>jnle</td><td><del>(SF^OF)&amp;</del>ZF</td><td>大于(有符号&gt;)</td></tr><tr><td>jge Label</td><td>jnl</td><td>~(SF^OF)</td><td>大于或等于(有符号&gt;=)</td></tr><tr><td>jl Label</td><td>jnge</td><td>SF^OF</td><td>小于(有符号&lt;)</td></tr><tr><td>jle Label</td><td>jng</td><td>(SF^OF)|ZF</td><td>小于或等于(有符号&lt;=)</td></tr><tr><td>ja Label</td><td>jnbe</td><td><del>CF&amp;</del>ZF</td><td>超过(无符号&gt;)</td></tr><tr><td>jae Label</td><td>jnb</td><td>~CF</td><td>超过或相等(无符号&gt;=)</td></tr><tr><td>jb Label</td><td>jnae</td><td>CF</td><td>低于(无符号&lt;)</td></tr><tr><td>jbe Label</td><td>jna</td><td>CF</td><td>ZF</td></tr></tbody></table><h3 id="CMOVE"><a href="#CMOVE" class="headerlink" title="CMOVE"></a>CMOVE</h3><p>条件传送指令。当传送条件满足时，指令吧源值S复制到目的地R</p><table><thead><tr><th>指令</th><th>同义名</th><th>传送条件</th><th>描述</th></tr></thead><tbody><tr><td>cmove S,R</td><td>cmovz</td><td>ZF</td><td>相等/零</td></tr><tr><td>cmovne S,R</td><td>cmovnz</td><td>~ZF</td><td>不相等/非零</td></tr><tr><td>cmovs S,R</td><td></td><td>SF</td><td>负数</td></tr><tr><td>cmovns S,R</td><td></td><td>~SF</td><td>非负数</td></tr><tr><td>cmovg S,R</td><td>cmovnle</td><td><del>(SF^OF)&amp;</del>ZF</td><td>大于(有符号&gt;)</td></tr><tr><td>cmovge S,R</td><td>cmovnl</td><td>~(SF^OF)</td><td>大于或等于(有符号&gt;=)</td></tr><tr><td>cmovgl S,R</td><td>cmovnge</td><td>SF^OF</td><td>小于(有符号&lt;)</td></tr><tr><td>cmovgle S,R</td><td>cmovng</td><td>(SF^OF)|ZF</td><td>小于或等于(有符号&lt;=)</td></tr><tr><td>cmova S,R</td><td>cmovnbe</td><td><del>CF&amp;</del>ZF</td><td>超过(无符号&gt;)</td></tr><tr><td>cmovae S,R</td><td>cmovnb</td><td>~CF</td><td>超过或相等(无符号&gt;=)</td></tr><tr><td>cmovb S,R</td><td>cmovnae</td><td>CF</td><td>低于(无符号&lt;)</td></tr><tr><td>cmovbe S,R</td><td>cmovna</td><td>CF|ZF</td><td>低于或相等(无符号&lt;=)</td></tr></tbody></table><h2 id="条件控制转移-条件数据传送"><a href="#条件控制转移-条件数据传送" class="headerlink" title="条件控制转移 条件数据传送"></a>条件控制转移 条件数据传送</h2><p>为了理解为什么基于条件数据传送的代码会比基于条件控制转移的代码性能要好，我们必须了解一些关于现代处理器如何运行的知识。</p><p>处理器通过使用流水线(pipelining)来获得高性能，在流水线中，一 条指令的处理要经过一系列的阶段，每个阶段执行所需操作的一小部分(例如，从内存取 指令、确定指令类型、从内存读数据、执行算术运算、向内存写数据，以及更新程序计数 器)。这种方法通过重叠连续指令的步骤来获得高性能，例如，在取一条指令的同时，执 行它前面一条指令的算术运算。要做到这一点，要求能够事先确定要执行的指令序列，这 样才能保持流水线中充满了待执行的指令。当机器 遇到条件跳转(也称为 “分支”)时，只 有当分支条件求值完成之后，才能决定分支往哪边走。处理器采用非常精密的分支预测逻 辑来猜测每条跳转指令是否会执行。只要它的猜测还比较可靠(现代微处理器设计试图达 到 90%以上的成功率)，指令流水线中就会充满着指令。另一方面，错误预测一个跳转， 要求处理器丢掉它为该跳转指令后所有指令已做的工作，然后再开始用从正确位置处起始 的指令去填充流水线。正如我们会看到的，这样一个错误预测会招致很严重的惩罚，浪费 大约 15~30 个时钟周期，导致程序性能严重下降。</p><p>条件控制转移 与 条件数据传送 demo 如下:</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v = test-expr ? then-expr : else-expr;</span><br><span class="line"></span><br><span class="line">基于 条件控制转移 伪代码如下:    (then-expr / else-expr 这两个只执行一次)</span><br><span class="line"><span class="keyword">if</span> (!test-expr)</span><br><span class="line">  goto <span class="literal">false</span>;</span><br><span class="line">v = then-expr;</span><br><span class="line">goto <span class="keyword">done</span>;</span><br><span class="line"><span class="literal">false</span>:</span><br><span class="line">  v = else-expr;</span><br><span class="line"><span class="keyword">done</span>;</span><br><span class="line"></span><br><span class="line">基于 条件数据传送 伪代码如下:    (then-expr / else-expr 这两个都会被执行)</span><br><span class="line">v = then-expr;</span><br><span class="line">ve = else-expr;</span><br><span class="line">t = test-expr;</span><br><span class="line"><span class="keyword">if</span>(!t) v = ve;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;字节&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1 bytes&lt;/td&gt;
&lt;td&gt;字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w&lt;/</summary>
      
    
    
    
    
    <category term="assembly" scheme="https://altman-xu.github.io/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes-On-MacOS-minikube</title>
    <link href="https://altman-xu.github.io/2021/06/29/Kubernetes-On-MacOS-minikube/"/>
    <id>https://altman-xu.github.io/2021/06/29/Kubernetes-On-MacOS-minikube/</id>
    <published>2021-06-29T07:18:15.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install docker</span><br><span class="line">brew install virtualbox</span><br><span class="line">brew install kubectl</span><br><span class="line">brew install minikube</span><br></pre></td></tr></table></figure><h2 id="minikube-命令"><a href="#minikube-命令" class="headerlink" title="minikube 命令"></a>minikube 命令</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## minikube 支持三种HyperKit、VirtualBox、Parallels Desktop、VMware Fusion</span></span><br><span class="line"><span class="comment">## 设置默认 driver</span></span><br><span class="line">minikube config <span class="built_in">set</span> driver virtualbox</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动集群</span></span><br><span class="line"><span class="comment">## 简单版本</span></span><br><span class="line">minikube start</span><br><span class="line"><span class="comment">## 详细参数版本</span></span><br><span class="line">minikube start --v=0 --kubernetes-version v1.20.7 --cpus 4 --memory=8192 --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --driver=virtualbox</span><br><span class="line"></span><br><span class="line"><span class="comment">## 参数说明</span></span><br><span class="line">--v 日志等级</span><br><span class="line">  0 INFO level logs</span><br><span class="line">  1 WARNING level logs</span><br><span class="line">  2 ERROR level logs</span><br><span class="line">  3 libmachine logging</span><br><span class="line">  7 libmachine --debug level logging</span><br><span class="line">--kubernetes-version 指定版本</span><br><span class="line">--cpus 4 --memory=8192 指定资源</span><br><span class="line">--image-repository 指定镜像代理</span><br><span class="line">--driver=virtualbox 指定 driver, 如果设置过默认 driver 这个可以忽略</span><br></pre></td></tr></table></figure><h3 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在新的终端运行命令</span></span><br><span class="line"><span class="comment">## 打开仪表盘，默认会打开一个浏览器页面</span></span><br><span class="line">minikube dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment">## 打开仪表盘，但是不打开浏览器</span></span><br><span class="line">minikube dashboard --url</span><br></pre></td></tr></table></figure><h3 id="addons"><a href="#addons" class="headerlink" title="addons"></a>addons</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## addons 相关命令</span></span><br><span class="line"><span class="comment">## 启用 ingress</span></span><br><span class="line">minikube addons <span class="built_in">enable</span> ingress</span><br><span class="line"><span class="comment">## 禁用 ingress</span></span><br><span class="line">minikube addons <span class="built_in">disable</span> ingress</span><br><span class="line"></span><br><span class="line">minikube addons list</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 运行 kubectl 创建好的服务</span></span><br><span class="line">minikube service hello-node</span><br></pre></td></tr></table></figure><h3 id="stop-delete"><a href="#stop-delete" class="headerlink" title="stop delete"></a>stop delete</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 关闭 minikube virtual machine</span></span><br><span class="line">minikube stop</span><br><span class="line"><span class="comment">## 删除 minikube virtual machine</span></span><br><span class="line">minikube delete</span><br></pre></td></tr></table></figure><h2 id="kubectl-命令"><a href="#kubectl-命令" class="headerlink" title="kubectl 命令"></a>kubectl 命令</h2><h3 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建 deployment</span></span><br><span class="line">kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4</span><br><span class="line"><span class="comment">## 查看 deployment</span></span><br><span class="line">kubectl get deployments</span><br></pre></td></tr></table></figure><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看 cluster events</span></span><br><span class="line">kubectl get events</span><br></pre></td></tr></table></figure><h3 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看 cubectl configuration</span></span><br><span class="line">kubectl config view</span><br></pre></td></tr></table></figure><h3 id="pods"><a href="#pods" class="headerlink" title="pods"></a>pods</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看 pod</span></span><br><span class="line"><span class="comment">#### 查看 namespace 为 default 的 pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment">#### 查看所有 namespace 的 pod</span></span><br><span class="line">kubectl get pods --all-namespaces -o wide</span><br><span class="line"><span class="comment">#### 查看指定 namespace 为 kube-system 的 pod</span></span><br><span class="line">kubectl get pods -n kube-system -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询详细</span></span><br><span class="line">kubectl describe pod PodName</span><br></pre></td></tr></table></figure><h3 id="services"><a href="#services" class="headerlink" title="services"></a>services</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看你创建的 pod,service</span></span><br><span class="line">kubectl get pod,svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看 service</span></span><br><span class="line">kubectl get services --all-namespaces</span><br><span class="line"><span class="comment">## 创建 service</span></span><br><span class="line">kubectl expose deployment hello-node --<span class="built_in">type</span>=LoadBalancer --port=8080</span><br><span class="line"><span class="comment">## 查看 service</span></span><br><span class="line">kubectl get services --all-namespaces</span><br><span class="line"><span class="comment">## 注: 对比第一次查看 service, 此时多了一个刚刚 expose 的 hello-node 服务</span></span><br><span class="line"><span class="comment">## 原因: 默认 pod都是只在集群内部可用，只有expose之后，外部网络才可以访问到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## minikube 运行服务</span></span><br><span class="line">minikube service hello-node</span><br></pre></td></tr></table></figure><h3 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 删除 service deploy, 即 清理资源</span></span><br><span class="line">kubectl delete service hello-node</span><br><span class="line">kubectl delete deployment hello-node</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/93e4d1508a52">在MacOS上安装kubernetes</a><br><a href="https://zhuanlan.zhihu.com/p/65559363">在MAC上安装K8S (kubernets) for Docker Desktop</a><br><a href="https://learnku.com/docs/go-micro-build/1.0/kubernetes-mac-os-based-installation-tutorial/8878">手摸手教你从开发到部署(CI/CD)GO微服务系列</a><br><a href="https://minikube.sigs.k8s.io/docs/">minikube docs</a><br><a href="https://kubernetes.io/docs/tutorials/hello-minikube/">k8s tutorials Hello Minikube</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装软件&quot;&gt;&lt;a href=&quot;#安装软件&quot; class=&quot;headerlink&quot; title=&quot;安装软件&quot;&gt;&lt;/a&gt;安装软件&lt;/h2&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://altman-xu.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Hbase</title>
    <link href="https://altman-xu.github.io/2021/06/23/Hbase/"/>
    <id>https://altman-xu.github.io/2021/06/23/Hbase/</id>
    <published>2021-06-23T03:13:25.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MacOS-本机安装运行-hbase-单机"><a href="#MacOS-本机安装运行-hbase-单机" class="headerlink" title="MacOS 本机安装运行 hbase 单机"></a>MacOS 本机安装运行 hbase 单机</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装命令</span></span><br><span class="line">brew install hbase</span><br><span class="line"><span class="comment">## 查看版本</span></span><br><span class="line">brew info hbase</span><br><span class="line"><span class="comment">## 运行命令</span></span><br><span class="line">brew services start hbase</span><br><span class="line"><span class="comment">## 查看运行状态</span></span><br><span class="line">brew services list</span><br><span class="line"><span class="comment">## 进入 hbase shell 终端</span></span><br><span class="line">hbase shell  <span class="comment">## 此命令如果无法执行，则进入 /usr/local/Cellar/hbase/2.4.3/bin 目录 执行 sh ./hbase shell</span></span><br></pre></td></tr></table></figure><p>查看版本信息截图如下:</p><p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/20210623111930.png"></p><h2 id="MacOS-连接远程-hbase-集群"><a href="#MacOS-连接远程-hbase-集群" class="headerlink" title="MacOS 连接远程 hbase 集群"></a>MacOS 连接远程 hbase 集群</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 通过配置 ZK 地址 来连接对应远程的 hbase 集群</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hbase/2.4.3/libexec/conf</span><br><span class="line">vim hbase-site.xml</span><br><span class="line"><span class="comment">## 在这个文件的 &lt;configuration&gt; 节点下添加如下子节点</span></span><br><span class="line"><span class="comment">## zk:2181,zk:2181,zk:2181 为集群的 zk 连接地址</span></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;zk:2181,zk:2181,zk:2181&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 然后执行命令连接远程 hbase, 可执行 list 命令查看所有表，验证是否连接到远程 hbase</span></span><br><span class="line">hbase shell</span><br></pre></td></tr></table></figure><h2 id="Hbase-命令"><a href="#Hbase-命令" class="headerlink" title="Hbase 命令"></a>Hbase 命令</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看所有表</span></span><br><span class="line">list</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看某个表结构，例如 scores</span></span><br><span class="line">describe <span class="string">&quot;scores&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除表 scores , 删除需要先 disable 再 drop</span></span><br><span class="line"><span class="built_in">disable</span> <span class="string">&quot;scores&quot;</span></span><br><span class="line">drop <span class="string">&quot;scores&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除 匹配表</span></span><br><span class="line">drop_all <span class="string">&#x27;t.*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建表 scores 表，包含两个列族 grade 、 course</span></span><br><span class="line">create <span class="string">&#x27;scores&#x27;</span>,<span class="string">&#x27;grade&#x27;</span>,<span class="string">&#x27;course&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## put 命令往表添加数据  </span></span><br><span class="line"><span class="comment">## 格式: put &#x27;t1&#x27;, &#x27;r1&#x27;, &#x27;c1&#x27;, &#x27;value&#x27;, ts1   </span></span><br><span class="line"><span class="comment">## t1指表名，r1指行键名，c1指列名，value指单元格值。ts1指时间戳，一般都省略掉了</span></span><br><span class="line"><span class="comment">## 一次 put 只能往表里面 put 一个单元格数据</span></span><br><span class="line">put <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, <span class="string">&#x27;grade:&#x27;</span>, <span class="string">&#x27;5&#x27;</span></span><br><span class="line">put <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, <span class="string">&#x27;course:math&#x27;</span>, <span class="string">&#x27;99&#x27;</span></span><br><span class="line">put <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, <span class="string">&#x27;course:english&#x27;</span>, <span class="string">&#x27;98&#x27;</span> <span class="comment">## course 列族包含多个列，需要 列族:列 指定对应的列名</span></span><br><span class="line">put <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;5&#x27;</span>              <span class="comment">## grade 列族就只有一列 故 : 可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## get 命令查询表数据</span></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, <span class="string">&#x27;grade&#x27;</span></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, <span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;course:math&#x27;</span>, <span class="string">&#x27;course:english&#x27;</span></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, [<span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;course:math&#x27;</span>, <span class="string">&#x27;course:english&#x27;</span>]</span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, &#123;COLUMN =&gt; <span class="string">&#x27;grade&#x27;</span>&#125;</span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, &#123;COLUMN =&gt; [<span class="string">&#x27;grade&#x27;</span>,<span class="string">&#x27;course:math&#x27;</span>, <span class="string">&#x27;course:english&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, &#123;COLUMN =&gt; <span class="string">&#x27;grade&#x27;</span>, TIMESTAMP =&gt; 1624436235582&#125;   <span class="comment">## 时间错为毫秒格式</span></span><br><span class="line">get <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, &#123;COLUMN =&gt; <span class="string">&#x27;grade&#x27;</span>, TIMESTAMP =&gt; 1624436235582, VERSIONS =&gt; 4&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## scan 命令扫描所有数据, 可以加限定词 TIMERANGE, FILTER, LIMIT, STARTROW, STOPROW, TIMESTAMP, MAXLENGTH, COLUMNS</span></span><br><span class="line">scan <span class="string">&#x27;scores&#x27;</span></span><br><span class="line">scan <span class="string">&#x27;scores&#x27;</span>, &#123;COLUMNS =&gt; [<span class="string">&#x27;grade&#x27;</span>, <span class="string">&#x27;course:math&#x27;</span>], LIMIT =&gt; 10, STARTROW =&gt; <span class="string">&#x27;Altman&#x27;</span>&#125;</span><br><span class="line">scan <span class="string">&#x27;scores&#x27;</span>, &#123;COLUMNS =&gt; [<span class="string">&#x27;grade&#x27;</span>], TIMERANGE =&gt; [1624436235582, 1624436335582]&#125;</span><br><span class="line">scan <span class="string">&#x27;scores&#x27;</span>, &#123;FILTER =&gt; <span class="string">&quot;(PrefixFilter(&#x27;Al&#x27;) AND (QualifierFilter(&gt;=, &#x27;binary:xzy&#x27;))) AND (TimestampsFilter(123,456))&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## delete 删除指定数据</span></span><br><span class="line">delete <span class="string">&#x27;t1&#x27;</span>, <span class="string">&#x27;r1&#x27;</span>, <span class="string">&#x27;c1&#x27;</span>, ts1</span><br><span class="line">delete <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span>, <span class="string">&#x27;grade&#x27;</span></span><br><span class="line"><span class="comment">## deleteall 删除整行数据 慎用</span></span><br><span class="line">deleteall <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;Altman&#x27;</span></span><br><span class="line"><span class="comment">## truncate 命令删除全表 , 这个命令其实是 disable drop create 三个命令组合出来的</span></span><br><span class="line">truncate <span class="string">&#x27;scores&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## alter 修改表结构  若 alter 命令执行报错，则先 disable &#x27;scores&#x27;, 再执行 alter 语句, 最后执行 enable &#x27;scores&#x27;</span></span><br><span class="line"><span class="comment">### a. 添加一个列族 info</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, NAME=&gt;<span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### b. 修改一个列族 info</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, NAME=&gt;<span class="string">&#x27;info&#x27;</span>, VERSIONS =&gt; 5</span><br><span class="line"></span><br><span class="line"><span class="comment">### c. 删除一个列族 info</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, NAME =&gt; <span class="string">&#x27;info&#x27;</span>, METHOD =&gt; <span class="string">&#x27;delete&#x27;</span> </span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, <span class="string">&#x27;delete&#x27;</span> =&gt; <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### d. 修改表属性 MAX_FILESIZE, MEMSTORE_FLUSHSIZE, READONLY, DEFERRED_LOG_FLUSH</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, METHOD =&gt; <span class="string">&#x27;table_att&#x27;</span>, MAX_FILESIZE =&gt; <span class="string">&#x27;134217728&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### e. 添加一个表协同处理器   一个表上可以配置多个协同处理器，一个序列会自动增长进行标识。加载协同处理器（可以说是过滤程序）需要符合以下规则：[coprocessor jar file location] | class name | [priority] | [arguments]</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, METHOD =&gt; <span class="string">&#x27;table_att&#x27;</span>, <span class="string">&#x27;coprocessor&#x27;</span> =&gt; ‘hdfs:///foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2′</span><br><span class="line"></span><br><span class="line"><span class="comment">### f. 移除 coprocessor</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, METHOD =&gt; <span class="string">&#x27;table_att_unset&#x27;</span>, NAME =&gt; <span class="string">&#x27;coprocessor$1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### g. 可以一次执行多个 alter 命令</span></span><br><span class="line">alter <span class="string">&#x27;scores&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;new_coloumn&#x27;</span>&#125;, &#123;NAME =&gt; <span class="string">&#x27;info&#x27;</span>, METHOD =&gt; <span class="string">&#x27;delete&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## count 命令统计行数  count一般会比较耗时，使用mapreduce进行统计，统计结果会缓存，默认是10行。统计间隔默认的是1000行（INTERVAL）</span></span><br><span class="line">count <span class="string">&#x27;scores&#x27;</span></span><br><span class="line">count <span class="string">&#x27;scores&#x27;</span>, INTERVAL =&gt; 100000</span><br><span class="line">count <span class="string">&#x27;scores&#x27;</span>, CACHE =&gt; 1000</span><br><span class="line">count <span class="string">&#x27;scores&#x27;</span>, INTERVAL =&gt; 100000, CACHE =&gt; 1000</span><br><span class="line"></span><br><span class="line"><span class="comment">## disable 表</span></span><br><span class="line"><span class="built_in">disable</span> <span class="string">&#x27;scores&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## disable_all 正则匹配</span></span><br><span class="line">disable_all <span class="string">&#x27;t.*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## is_disabled </span></span><br><span class="line">is_disabled <span class="string">&#x27;scores&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## help 查看帮助文档</span></span><br><span class="line"><span class="built_in">help</span>               </span><br><span class="line"><span class="built_in">help</span> <span class="string">&#x27;alter&#x27;</span>        <span class="comment">## 查看 alter 命令的帮助</span></span><br><span class="line"><span class="built_in">help</span> <span class="string">&#x27;create&#x27;</span>       <span class="comment">## 查看 create 命令的帮助</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## hbase shell 脚本  将一些hbase shell 命令写到一个文件 cmd.txt ，然后顺序执行</span></span><br><span class="line">hbase shell cmd.txt</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://help.aliyun.com/document_detail/52056.html">使用 Shell 访问</a><br><a href="https://www.cnblogs.com/ggjucheng/p/3379607.html">HBase shell的基本用法</a><br><a href="https://hbase.apache.org/2.4/book.html">Apache HBase ™ Reference Guide v2.4</a><br><a href="https://learnhbase.wordpress.com/">Learn HBase</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MacOS-本机安装运行-hbase-单机&quot;&gt;&lt;a href=&quot;#MacOS-本机安装运行-hbase-单机&quot; class=&quot;headerlink&quot; title=&quot;MacOS 本机安装运行 hbase 单机&quot;&gt;&lt;/a&gt;MacOS 本机安装运行 hbase 单机&lt;/</summary>
      
    
    
    
    
    <category term="Hbase" scheme="https://altman-xu.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-归并</title>
    <link href="https://altman-xu.github.io/2021/05/26/Algorithm-Sort-MergeSort/"/>
    <id>https://altman-xu.github.io/2021/05/26/Algorithm-Sort-MergeSort/</id>
    <published>2021-05-26T08:18:26.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用语言: go (1.13.15)<br>使用工具: GoLang<br>涉及文件: sort_merge.go</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>涉及文件: sotr_test.go</p><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;使用语言: go (1.13.15)&lt;br&gt;使用工具: GoLang&lt;br&gt;涉及文件: sort_merge.go&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/categories/Algorithm/"/>
    
    
    <category term="Sort" scheme="https://altman-xu.github.io/tags/Sort/"/>
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-快排</title>
    <link href="https://altman-xu.github.io/2021/05/26/ALgorithm-Sort-QuickSort/"/>
    <id>https://altman-xu.github.io/2021/05/26/ALgorithm-Sort-QuickSort/</id>
    <published>2021-05-26T07:15:11.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用语言: go (1.13.15)<br>使用工具: GoLang<br>涉及文件: sort_quick.go</p><h3 id="中枢不动-v1"><a href="#中枢不动-v1" class="headerlink" title="中枢不动 v1"></a>中枢不动 v1</h3><p>原理: 找到一个中枢，保持不动，把小于中枢的值放到他左边，大于中枢的值放到他右边，然后再以此方法对这两部分数据分别进行快速排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v1_1</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &lt; end &#123;</span><br><span class="line">key := array[start]                   <span class="comment">// 用待排序数组的第一个作为中枢</span></span><br><span class="line">i := start</span><br><span class="line"><span class="keyword">for</span> j := start + <span class="number">1</span>; j &lt;= end; j ++ &#123;  <span class="comment">// 双指针往后移动 j指针指向&gt;中枢的元素, i指针指向&lt;=中枢的元素, 中枢一直不动，在第一个元素</span></span><br><span class="line"><span class="keyword">if</span> key &gt; array[j] &#123;</span><br><span class="line">i ++</span><br><span class="line">swap(array, j, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(array, i, start)                 <span class="comment">// 将中枢放到指定位置</span></span><br><span class="line">QuickSort_v1_1(array, start, i - <span class="number">1</span>)</span><br><span class="line">QuickSort_v1_1(array, i + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法与上面 QuickSort_Simple 原理一样，只是换了种写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v1_2</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &lt; end &#123;</span><br><span class="line">pivot := QuickSort_v1_2_partition(array, start, end)</span><br><span class="line">QuickSort_v1_2(array, start, pivot - <span class="number">1</span>)</span><br><span class="line">QuickSort_v1_2(array, pivot + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v1_2_partition</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">key := array[start]</span><br><span class="line">i := start</span><br><span class="line"><span class="keyword">for</span> j := start + <span class="number">1</span>; j &lt;= end ; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> key &gt; array[j] &#123;</span><br><span class="line">i ++</span><br><span class="line">swap(array, j, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(array, i, start)</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中枢变化-v2"><a href="#中枢变化-v2" class="headerlink" title="中枢变化 v2"></a>中枢变化 v2</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v2_1</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> start &lt; end &#123;</span><br><span class="line">pivot := QuickSort_v2_1_partition(array, start ,end)</span><br><span class="line">QuickSort_v2_1(array, start, pivot - <span class="number">1</span>)</span><br><span class="line">QuickSort_v2_1(array, pivot + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v2_1_partition</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">pivot := start</span><br><span class="line"><span class="keyword">for</span> start != end &#123;</span><br><span class="line"><span class="keyword">if</span> pivot != end &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">第一次循环的时候用第一个元素作为中枢，和最后一个进行对比，</span></span><br><span class="line"><span class="comment">  如果小于最后一个元素，执行end-- 就是和倒数第二个元素进行对比，以此类推。</span></span><br><span class="line"><span class="comment">  如果大于最后一个元素，就和最后一个元素交互，然后让pivot指向最后一个元素</span></span><br><span class="line"><span class="comment">下一轮循环的时候回指向下面的else方法和前面的元素进行对比。</span></span><br><span class="line"><span class="comment">也就是说这个中枢的位置始终是在变动的，所以这一轮执行了之后小于中枢的值就会放到他的前面，大于中枢的值就会放到他的后面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> array[end] &lt; array[pivot] &#123;</span><br><span class="line">swap(array, end, pivot)</span><br><span class="line">pivot = end</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">end --</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> array[start] &gt; array[pivot] &#123;</span><br><span class="line">swap(array, start, pivot)</span><br><span class="line">pivot = start</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">start ++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pivot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v2_2</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &lt; end &#123;</span><br><span class="line">pivot := QuickSort_v2_2_partition(array, start ,end)</span><br><span class="line">QuickSort_v2_2(array, start, pivot - <span class="number">1</span>)</span><br><span class="line">QuickSort_v2_2(array, pivot + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v2_2_partition</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">pivot := array[start] <span class="comment">// 采用子序列的第一个元素作为中枢</span></span><br><span class="line"><span class="keyword">for</span> start &lt; end &#123;</span><br><span class="line"><span class="keyword">for</span> start &lt; end &amp;&amp; array[end] &gt;= pivot &#123; <span class="comment">// 从后往前在后半部分中寻找第一个小于中枢的元素</span></span><br><span class="line">end --</span><br><span class="line">&#125;</span><br><span class="line">swap(array, start, end)                     <span class="comment">// 将这个元素交换到前半部</span></span><br><span class="line"><span class="keyword">for</span> start &lt; end &amp;&amp; array[start] &lt;= pivot &#123;  <span class="comment">// 从前往后在前半部寻找第一个大于等于中枢的元素</span></span><br><span class="line">start ++</span><br><span class="line">&#125;</span><br><span class="line">swap(array, start, end)                     <span class="comment">// 将这个元素交换到后半部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种结合–最易理解版本"><a href="#两种结合–最易理解版本" class="headerlink" title="两种结合–最易理解版本"></a>两种结合–最易理解版本</h3><p>原理: 中枢位置不变，中枢之后的元素进行最前和最后的交换，最后再把中枢放到指定位置，相当于上面两种的结合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v3_1</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &lt; end &#123;</span><br><span class="line">pivot, i, j := array[start], start, end <span class="comment">// 选定第一个元素为中枢</span></span><br><span class="line"><span class="keyword">for</span> i &lt; j &#123;</span><br><span class="line"><span class="keyword">for</span> i &lt; j &amp;&amp; array[j] &gt;= pivot &#123;  <span class="comment">// 从后往前，找一个比中枢小的元素位置j</span></span><br><span class="line">j --</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i &lt; j &amp;&amp; array[i] &lt;= pivot &#123;  <span class="comment">// 从前往后，找一个比中枢大的元素位置i</span></span><br><span class="line">i ++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &lt; j &#123;</span><br><span class="line">swap(array, i, j)<span class="comment">// 中枢不动，交互 [i j]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(array, i, start)<span class="comment">// 中枢动，交互 [i 中枢]</span></span><br><span class="line">QuickSort_v3_1(array, start, i - <span class="number">1</span>)</span><br><span class="line">QuickSort_v3_1(array, i + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两种结合"><a href="#两种结合" class="headerlink" title="两种结合"></a>两种结合</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v3_2</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> start &lt; end &#123;</span><br><span class="line">pivot := QuickSort_v3_2_partition(array, start, end)</span><br><span class="line">QuickSort_v3_2(array, start, pivot - <span class="number">1</span>)</span><br><span class="line">QuickSort_v3_2(array, pivot + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort_v3_2_partition</span><span class="params">(array []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">pivot := start</span><br><span class="line"><span class="keyword">for</span> start != end &#123;</span><br><span class="line"><span class="keyword">for</span> start &lt; end &amp;&amp; array[start] &lt; array[pivot] &#123;</span><br><span class="line">start ++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> start &lt; end &amp;&amp; array[end] &gt;= array[pivot] &#123;</span><br><span class="line">end --</span><br><span class="line">&#125;</span><br><span class="line">swap(array, start, end)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>涉及文件: sotr_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_QuickSort</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> array = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">7</span>, <span class="number">-6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">t.Logf(<span class="string">&quot;before QuickSort_v1_1:%v&quot;</span>, array)</span><br><span class="line">QuickSort_v1_1(array, <span class="number">0</span>, <span class="built_in">len</span>(array)<span class="number">-1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  QuickSort_v1_1:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">7</span>, <span class="number">-6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before QuickSort_v1_2:%v&quot;</span>, array)</span><br><span class="line">QuickSort_v1_2(array, <span class="number">0</span>, <span class="built_in">len</span>(array)<span class="number">-1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  QuickSort_v1_2:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">7</span>, <span class="number">-6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before QuickSort_v2_1:%v&quot;</span>, array)</span><br><span class="line">QuickSort_v2_1(array, <span class="number">0</span>, <span class="built_in">len</span>(array)<span class="number">-1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  QuickSort_v2_1:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">7</span>, <span class="number">-6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before QuickSort_v2_2:%v&quot;</span>, array)</span><br><span class="line">QuickSort_v2_2(array, <span class="number">0</span>, <span class="built_in">len</span>(array)<span class="number">-1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  QuickSort_v2_2:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">7</span>, <span class="number">-6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before QuickSort_v3_1:%v&quot;</span>, array)</span><br><span class="line">QuickSort_v3_1(array, <span class="number">0</span>, <span class="built_in">len</span>(array)<span class="number">-1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  QuickSort_v3_1:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">-9</span>, <span class="number">7</span>, <span class="number">-6</span>, <span class="number">8</span>, <span class="number">0</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before QuickSort_v3_2:%v&quot;</span>, array)</span><br><span class="line">QuickSort_v3_2(array, <span class="number">0</span>, <span class="built_in">len</span>(array)<span class="number">-1</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  QuickSort_v3_2:%v&quot;</span>, array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   Test_QuickSort</span><br><span class="line">--- PASS: Test_QuickSort (0.00s)</span><br><span class="line">    sotr_test.go:72: before QuickSort_v1_1:[2 9 -9 7 -6 8 0]</span><br><span class="line">    sotr_test.go:74: after  QuickSort_v1_1:[-9 -6 0 2 7 8 9]</span><br><span class="line">    sotr_test.go:77: before QuickSort_v1_2:[2 9 -9 7 -6 8 0]</span><br><span class="line">    sotr_test.go:79: after  QuickSort_v1_2:[-9 -6 0 2 7 8 9]</span><br><span class="line">    sotr_test.go:82: before QuickSort_v2_1:[2 9 -9 7 -6 8 0]</span><br><span class="line">    sotr_test.go:84: after  QuickSort_v2_1:[-9 -6 0 2 7 8 9]</span><br><span class="line">    sotr_test.go:87: before QuickSort_v2_2:[2 9 -9 7 -6 8 0]</span><br><span class="line">    sotr_test.go:89: after  QuickSort_v2_2:[-9 -6 0 2 7 8 9]</span><br><span class="line">    sotr_test.go:92: before QuickSort_v3_1:[2 9 -9 7 -6 8 0]</span><br><span class="line">    sotr_test.go:94: after  QuickSort_v3_1:[-9 -6 0 2 7 8 9]</span><br><span class="line">    sotr_test.go:97: before QuickSort_v3_2:[2 9 -9 7 -6 8 0]</span><br><span class="line">    sotr_test.go:99: after  QuickSort_v3_2:[-9 -6 0 2 7 8 9]</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;使用语言: go (1.13.15)&lt;br&gt;使用工具: GoLang&lt;br&gt;涉及文件: sort_quick.go&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/categories/Algorithm/"/>
    
    
    <category term="Sort" scheme="https://altman-xu.github.io/tags/Sort/"/>
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-插入</title>
    <link href="https://altman-xu.github.io/2021/05/19/Algorithm-Sort-InsertSort/"/>
    <id>https://altman-xu.github.io/2021/05/19/Algorithm-Sort-InsertSort/</id>
    <published>2021-05-19T02:29:45.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用语言: go (1.13.15)<br>使用工具: GoLang<br>涉及文件: sort_insert.go</p><h3 id="直接插入"><a href="#直接插入" class="headerlink" title="直接插入"></a>直接插入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSort_simple</span><span class="params">(array []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line">key := array[i]</span><br><span class="line">j := i</span><br><span class="line"><span class="keyword">for</span> ; j &gt; <span class="number">0</span> ; j-- &#123;</span><br><span class="line"><span class="comment">// array[j-1] &gt; key: (大的往后排--升序)    array[j-1] &lt; key: (小的往后排--降序)</span></span><br><span class="line"><span class="keyword">if</span> array[j<span class="number">-1</span>] &gt; key &#123;</span><br><span class="line">array[j] = array[j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i != j &#123;</span><br><span class="line">array[j] = key</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分插入"><a href="#二分插入" class="headerlink" title="二分插入"></a>二分插入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSort_binary</span><span class="params">(array []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line"><span class="comment">// array[i] &lt; array[i-1] &amp;&amp; key &lt; array[mid] : (小的往前排--升序)     array[i] &gt; array[i-1] &amp;&amp; key &gt; array[mid] : (大的往前排--降序)</span></span><br><span class="line"><span class="keyword">if</span> array[i] &lt; array[i<span class="number">-1</span>] &#123;</span><br><span class="line">key := array[i]</span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">high := i - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">mid := low + (high - low)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> key &lt; array[mid] &#123;</span><br><span class="line">high = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := i; j &gt; low; j-- &#123;</span><br><span class="line">array[j] = array[j - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">array[low] = key</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSort_recursion</span><span class="params">(array []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">n--</span><br><span class="line">InsertSort_recursion(array, n)</span><br><span class="line">key := array[n]</span><br><span class="line">index := n <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> index &gt;= <span class="number">0</span> &amp;&amp; array[index] &gt; key &#123;</span><br><span class="line">array[index + <span class="number">1</span>] = array[index]</span><br><span class="line">index --</span><br><span class="line">&#125;</span><br><span class="line">array[index + <span class="number">1</span>] = key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>涉及文件: sotr_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_InsertSort</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">t.Logf(<span class="string">&quot;before InsertSort_simple:%v&quot;</span>, array)</span><br><span class="line">InsertSort_simple(array)</span><br><span class="line">t.Logf(<span class="string">&quot;after  InsertSort_simple:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before InsertSort_binary:%v&quot;</span>, array)</span><br><span class="line">InsertSort_binary(array)</span><br><span class="line">t.Logf(<span class="string">&quot;after  InsertSort_binary:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before InsertSort_recursion:%v&quot;</span>, array)</span><br><span class="line">InsertSort_recursion(array, <span class="built_in">len</span>(array))</span><br><span class="line">t.Logf(<span class="string">&quot;after  InsertSort_recursion:%v&quot;</span>, array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   Test_InsertSort</span><br><span class="line">--- PASS: Test_InsertSort (0.00s)</span><br><span class="line">    sotr_test.go:55: before InsertSort_simple:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:57: after  InsertSort_simple:[0 1 2 3 4]</span><br><span class="line">    sotr_test.go:60: before InsertSort_binary:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:62: after  InsertSort_binary:[0 1 2 3 4]</span><br><span class="line">    sotr_test.go:66: before InsertSort_recursion:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:68: after  InsertSort_recursion:[0 1 2 3 4]</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;使用语言: go (1.13.15)&lt;br&gt;使用工具: GoLang&lt;br&gt;涉及文件: sort_insert.go&lt;/p&gt;
&lt;h3 id=</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/categories/Algorithm/"/>
    
    
    <category term="Sort" scheme="https://altman-xu.github.io/tags/Sort/"/>
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-选择</title>
    <link href="https://altman-xu.github.io/2021/05/18/Algorithm-Sort-SelectSort/"/>
    <id>https://altman-xu.github.io/2021/05/18/Algorithm-Sort-SelectSort/</id>
    <published>2021-05-18T06:35:01.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用语言: go (1.13.15)<br>使用工具: GoLang<br>涉及文件: sort_bubble.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectSort</span><span class="params">(array[]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line">index := i</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(array); j++ &#123;</span><br><span class="line"><span class="comment">// array[index] &gt; array[j]:(大的往后排--升序)    array[index] &lt; array[j]:(小的往后排--降序)</span></span><br><span class="line"><span class="keyword">if</span> array[index] &gt; array[j] &#123;</span><br><span class="line">index = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i != index &#123;</span><br><span class="line">swap(array, i, index)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>涉及文件: sotr_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_SelectSort</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">t.Logf(<span class="string">&quot;before SelectSort:%v&quot;</span>, array)</span><br><span class="line">SelectSort(array)</span><br><span class="line">t.Logf(<span class="string">&quot;after  SelectSort:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before SelectSort_recursion:%v&quot;</span>, array)</span><br><span class="line">SelectSort_recursion(array, <span class="number">0</span>)</span><br><span class="line">t.Logf(<span class="string">&quot;after  SelectSort_recursion:%v&quot;</span>, array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   Test_SelectSort</span><br><span class="line">--- PASS: Test_SelectSort (0.00s)</span><br><span class="line">    sotr_test.go:40: before SelectSort:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:42: after  SelectSort:[0 1 2 3 4]</span><br><span class="line">    sotr_test.go:45: before SelectSort_recursion:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:47: after  SelectSort_recursion:[0 1 2 3 4]</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;使用语言: go (1.13.15)&lt;br&gt;使用工具: GoLang&lt;br&gt;涉及文件: sort_bubble.go&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/categories/Algorithm/"/>
    
    
    <category term="Sort" scheme="https://altman-xu.github.io/tags/Sort/"/>
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序-冒泡</title>
    <link href="https://altman-xu.github.io/2021/05/17/Algorithm-Sort-BubbleSort/"/>
    <id>https://altman-xu.github.io/2021/05/17/Algorithm-Sort-BubbleSort/</id>
    <published>2021-05-17T04:16:57.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用语言: go (1.13.15)<br>使用工具: GoLang<br>涉及文件: sort_bubble.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(array []<span class="keyword">int</span>, i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i != j) &#123; <span class="comment">// 一定要检查两个地址是否相同，否则若两个相同，改地址数据会被 异或 清零</span></span><br><span class="line">array[i] ^= array[j]</span><br><span class="line">array[j] ^= array[i]</span><br><span class="line">array[i] ^= array[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通版本-往前排"><a href="#普通版本-往前排" class="headerlink" title="普通版本 往前排"></a>普通版本 往前排</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 往前排</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort_front</span><span class="params">(array []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(array)<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(array); j++ &#123;</span><br><span class="line"><span class="comment">// array[j] &lt; array[i]:(小的往前排--升序)     array[j] &gt; array[i]:(大的往前排--降序)</span></span><br><span class="line"><span class="keyword">if</span> array[j] &lt; array[i] &#123;</span><br><span class="line">swap(array, i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="普通版本-往后排"><a href="#普通版本-往后排" class="headerlink" title="普通版本 往后排"></a>普通版本 往后排</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 往后排</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort_back</span><span class="params">(array []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(array)-i; j++ &#123;</span><br><span class="line"><span class="comment">// array[j] &gt; array[j + 1]:(大的往后排--升序)   array[j] &lt; array[j + 1]:(小的往后排--降序)</span></span><br><span class="line"><span class="keyword">if</span> array[j] &gt; array[j+<span class="number">1</span>] &#123;</span><br><span class="line">swap(array, j, j+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化版本"><a href="#优化版本" class="headerlink" title="优化版本"></a>优化版本</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化 (当后面的已经排序好的时候，可提前终止循环)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort_optimize</span><span class="params">(array []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> location <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="built_in">len</span>(array) - <span class="number">1</span><span class="comment">// 初始化最后交换位置为最后一个元素</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(array) - <span class="number">1</span>; i++ &#123;</span><br><span class="line">location = count</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; location; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> array[j] &gt; array[j + <span class="number">1</span>] &#123;</span><br><span class="line">swap(array, j, j + <span class="number">1</span>)</span><br><span class="line">count = j<span class="comment">// 记录无需位置的结束，有序从 j+1 位置开始</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> count == location &#123;<span class="comment">// 没有次序交换，排序完成</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort_recursion</span><span class="params">(array []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> || <span class="built_in">len</span>(array) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 逐渐减少n,每次都把最大的放到最后面,直到n为1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> array[i] &gt; array[i + <span class="number">1</span>] &#123;</span><br><span class="line">swap(array, i, i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BubbleSort_recursion(array, n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>涉及文件: sotr_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_bubbleSort</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before BubbleSort_front:%v&quot;</span>, array)</span><br><span class="line">BubbleSort_front(array)</span><br><span class="line">t.Logf(<span class="string">&quot;after  BubbleSort_front:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before BubbleSort_back:%v&quot;</span>, array)</span><br><span class="line">BubbleSort_back(array)</span><br><span class="line">t.Logf(<span class="string">&quot;after  BubbleSort_back:%v&quot;</span>, array)</span><br><span class="line"></span><br><span class="line">array = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">t.Logf(<span class="string">&quot;before BubbleSort_recursion:%v&quot;</span>, array)</span><br><span class="line">BubbleSort_recursion(array, <span class="built_in">len</span>(array))</span><br><span class="line">t.Logf(<span class="string">&quot;after  BubbleSort_recursion:%v&quot;</span>, array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=== RUN   Test_bubbleSort</span><br><span class="line">--- PASS: Test_bubbleSort (0.00s)</span><br><span class="line">    sotr_test.go:22: before BubbleSort_front:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:24: after  BubbleSort_front:[0 1 2 3 4]</span><br><span class="line">    sotr_test.go:27: before BubbleSort_back:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:29: after  BubbleSort_back:[0 1 2 3 4]</span><br><span class="line">    sotr_test.go:32: before BubbleSort_recursion:[1 0 3 2 4]</span><br><span class="line">    sotr_test.go:34: after  BubbleSort_recursion:[0 1 2 3 4]</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;使用语言: go (1.13.15)&lt;br&gt;使用工具: GoLang&lt;br&gt;涉及文件: sort_bubble.go&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/categories/Algorithm/"/>
    
    
    <category term="Sort" scheme="https://altman-xu.github.io/tags/Sort/"/>
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法 交换两个整数</title>
    <link href="https://altman-xu.github.io/2021/05/16/Switch-Two-Values/"/>
    <id>https://altman-xu.github.io/2021/05/16/Switch-Two-Values/</id>
    <published>2021-05-16T02:41:14.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="http://jokinkuang.github.io/2017/01/29/switch-two-values.html">经典的XOR异或交换算法</a></p></blockquote><p>1.如果你用这个办法交换2个指针的内容.那么你要先检查2个指针指向的地址是否相同.不然会导致内容被清0</p><p>2.速度并不比朴素的中间变量交换快.</p><p>结论.别这么干.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;-1&quot;&gt;&lt;a href=&quot;#-1&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://altman-xu.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>消息摘要、数字签名、数字证书</title>
    <link href="https://altman-xu.github.io/2021/05/14/Digital-Certificate/"/>
    <id>https://altman-xu.github.io/2021/05/14/Digital-Certificate/</id>
    <published>2021-05-14T09:44:29.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息摘要"><a href="#消息摘要" class="headerlink" title="消息摘要"></a>消息摘要</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>消息摘要算法是密码学算法中非常重要的一个分支，它通过对所有数据提取指纹信息以实现<code>数据签名</code>、<code>数据完整性校验</code>等功能，由于其不可逆性，有时候会被用做敏感信息的加密。</p><p>消息摘要算法也被称为<code>哈希(Hash)算法</code>或<code>散列算法</code>。</p><p>任何消息经过<code>散列函数</code>处理后，都会获得唯一的<code>散列值</code>，这一过程称为<code>消息摘要</code>，其散列值称为<code>数字指纹</code>，其算法自然就是<code>消息摘要算法</code>了。换句话说，如果其数字指纹一致，就说明其消息是一致的。</p><p>消息摘要算法的主要特征是加密过程不需要密钥，并且经过加密的数据无法被解密，目前可以解密逆向的只有 <code>CRC32</code> 算法，只有输入相同的明文数据经过相同的消息摘要算法才能得到相同的密文。</p><p>消息摘要算法不存在<code>密钥的管理与分发问题</code>，适合于分布式网络上使用。</p><p>消息摘要算法主要应用在<code>数字签名</code>领域，作为对明文的摘要算法。</p><p>著名的摘要算法有 RSA 公司的 <code>MD5</code> 算法和 <code>SHA-1</code> 算法及其大量的变体。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>(数字证书及CA详解)[<a href="https://blog.csdn.net/lk2684753/article/details/100160856]">https://blog.csdn.net/lk2684753/article/details/100160856]</a></p><blockquote><p>()[<a href="https://cloud.tencent.com/developer/article/1584742#:~:text=%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95%E6%98%AF%E5%AF%86%E7%A0%81,%E7%AE%97%E6%B3%95%E6%88%96%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95%E3%80%82]">https://cloud.tencent.com/developer/article/1584742#:~:text=%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95%E6%98%AF%E5%AF%86%E7%A0%81,%E7%AE%97%E6%B3%95%E6%88%96%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95%E3%80%82]</a></p></blockquote><p>(数字签名、数字证书与HTTPS是什么关系？)[<a href="https://www.zhihu.com/question/52493697/answer/1600962734]">https://www.zhihu.com/question/52493697/answer/1600962734]</a></p><p><a href="https://yfscfs.gitee.io/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98-18-hashicorp-raft-%E4%BA%8C-%E5%A6%82%E4%BD%95%E4%BB%A5%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8api/">极客时间之分布式协议与算法实战 18 Hashicorp Raft 二 如何以集群节点为中心使用API</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;消息摘要&quot;&gt;&lt;a href=&quot;#消息摘要&quot; class=&quot;headerlink&quot; title=&quot;消息摘要&quot;&gt;&lt;/a&gt;消息摘要&lt;/h2&gt;&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;消息摘</summary>
      
    
    
    
    
    <category term="Digital-Certificate" scheme="https://altman-xu.github.io/tags/Digital-Certificate/"/>
    
  </entry>
  
  <entry>
    <title>Kafka-原理</title>
    <link href="https://altman-xu.github.io/2021/04/22/Kafka-Principle/"/>
    <id>https://altman-xu.github.io/2021/04/22/Kafka-Principle/</id>
    <published>2021-04-22T03:26:23.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Customer-Group-消费者组"><a href="#Customer-Group-消费者组" class="headerlink" title="Customer Group 消费者组"></a>Customer Group 消费者组</h2><p>Customer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制</p><h3 id="重要特征"><a href="#重要特征" class="headerlink" title="重要特征"></a>重要特征</h3><ol><li>组内可以有多个消费者实例（Consumer Instance）</li><li>消费者组的唯一标识被称为Group ID，组内的消费者共享这个公共的ID</li><li>消费者组订阅主题，主题的每个分区只能被组内的一个消费者消费</li><li>消费者组机制，同时实现了<strong>消息队列</strong>模型和<strong>发布/订阅</strong>模型   <blockquote><p>若所有实例都属于一个 Group, 则实现<strong>消息队列</strong>模型<br>若所有实例分别属于不同 Group, 则实现<strong>发布/订阅</strong>模型</p></blockquote></li></ol><h3 id="Customer-Group-的-Customer-数量"><a href="#Customer-Group-的-Customer-数量" class="headerlink" title="Customer Group 的 Customer 数量"></a>Customer Group 的 Customer 数量</h3><p>理想情况下，Consumer 实例的数量应该等于该 Group 订阅主题的分区总数</p><blockquote><p>假设一个 Group 订阅了 3 个主题，分别是 A、B、C，它们的分区数依次是 1、2、3（总共是 6 个分区）<br>若设置 6 个 Consumer 实例，则平均每个示例消费 6/6=1 个分区，是<strong>理想情形</strong>，最大限度地实现高伸缩性<br>若设置 3 个 Consumer 实例，则平均每个示例消费 6/3=2 个分区<br>若设置 8 个 Consumer 实例，则会浪费 8-6=2 个 Customer 示例，他们不会被分配到任何分区，永远空闲</p></blockquote><h2 id="Rebalance-重平衡"><a href="#Rebalance-重平衡" class="headerlink" title="Rebalance 重平衡"></a>Rebalance 重平衡</h2><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区</p><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><ol><li>组成员数发生变更  <blockquote><p>比如有新的 Consumer 实例加入组或者离开组，抑或是有 Consumer 实例崩溃被“踢出”组</p></blockquote></li><li>订阅主题数发生变更<blockquote><p>Consumer Group 可以使用正则表达式的方式订阅主题，比如 consumer.subscribe(Pattern.compile(“t.*c”)) 就表明该 Group 订阅所有以字母 t 开头、字母 c 结尾的主题<br>在 Consumer Group 的运行过程中，你新创建了一个满足这样条件的主题，那么该 Group 就会发生 Rebalance</p></blockquote></li><li>订阅主题的分区数发生变更  <blockquote><p>Kafka 当前只能允许增加一个主题的分区数。当分区数增加时，就会触发订阅该主题的所有 Group 开启 Rebalance  </p></blockquote></li></ol><h3 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h3><p>Rebalance 发生时，Group 下所有的 Consumer 实例都会协调在一起共同参与，根据<strong>分配策略</strong>的协助， 给每个 Consumer 实例分配对应的主题分区  </p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>Stop The World<blockquote><p>在 Rebalance 过程中，所有 Consumer 实例都会停止消费，等待 Rebalance 完成，耗时长</p></blockquote></li><li>所有 Customer 全部重新分配分区<blockquote><p>更高效的做法是尽量减少分配方案的变动。例如实例 A 之前负责消费分区 1、2、3，那么 Rebalance 之后，如果可能的话，最好还是让实例 A 继续消费分区 1、2、3，而不是被重新分配其他的分区。这样的话，实例 A 连接这些分区所在 Broker 的 TCP 连接就可以继续用，不用重新创建连接其他 Broker 的 Socket 资源。</p></blockquote></li></ol><h2 id="Offset-位移"><a href="#Offset-位移" class="headerlink" title="Offset 位移"></a>Offset 位移</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Customer-Group-消费者组&quot;&gt;&lt;a href=&quot;#Customer-Group-消费者组&quot; class=&quot;headerlink&quot; title=&quot;Customer Group 消费者组&quot;&gt;&lt;/a&gt;Customer Group 消费者组&lt;/h2&gt;&lt;p&gt;Cu</summary>
      
    
    
    
    
    <category term="Kafka" scheme="https://altman-xu.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka-基本概念</title>
    <link href="https://altman-xu.github.io/2021/04/21/Kafka-Concept/"/>
    <id>https://altman-xu.github.io/2021/04/21/Kafka-Concept/</id>
    <published>2021-04-21T03:08:07.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/apache_kafka_logo_icon.svg" alt="kafka"></p><h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><p>生产者</p><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>消费者</p><h2 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h2><p>说明: 一个消费者组，由多个consumer组成，消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内的消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，及消费者组是逻辑上的一个订阅者。</p><p>一个partition分区中的消息只能被某一个消费者组中的一个消费者消费。这样设计的目的是为了提高消费者组的<strong>并发度</strong>。</p><p>当一个消费者组中的消费者个数与主题的分区数一致时才最合理，如果消费者个数过多就造成了性能浪费。</p><p>注: kafka 允许一个 topic 被多个消费者组消费，这种情况下。 假如topic有10条消息，则消费组A里面的所有消费者消费10条数据；消费组B里面所有消费者消费10条数据。即一条消息可以被多给消费组重复消费(在同一个消费组内，一条消息只会被组内的一个消费组消费)</p><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>说明: 一台kafka服务器就是一个broker。一个集群由多个broker组成，一个broker容纳多个topic</p><h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><p>说明: 可以理解为队列，生产者和消费者都是面向topic</p><h2 id="Replica-副本机制"><a href="#Replica-副本机制" class="headerlink" title="Replica:副本机制"></a>Replica:副本机制</h2><p>目的: 保证数据持久化或消息不丢失</p><p>同类: MySQL的主从同步(注:mysql从库可以支持读操作，不支持写操作)</p><p>说明: 备份即将相同数据拷贝到多台机器上，这些相同数据拷贝在kafka中被称为副本(Replica), kafka定义了以下两类副本: </p><h3 id="领导者副本-Leader-Replica"><a href="#领导者副本-Leader-Replica" class="headerlink" title="领导者副本(Leader Replica)"></a>领导者副本(Leader Replica)</h3><p>  前者对外提供服务(处理读写消息)</p><h3 id="追随者副本-Follower-Replica"><a href="#追随者副本-Follower-Replica" class="headerlink" title="追随者副本(Follower Replica)"></a>追随者副本(Follower Replica)</h3><p>  不提供任何服务,仅向leader发送请求，同步最新数据，当leader发生故障，某个Follower会成为新的Leader</p><p>限制: 同一主题的同一分区的leader和follower一定不在同一台机器上</p><p>限制: 创建topic时指定的副本数量，不能超过集群中的broker数量。 (分区数量则没限制，单机也可以创建多分区的topic)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  bin kafka-topics --create --bootstrap-server localhost:9092 --replication-factor 3 --partitions 3 --topic test2</span><br><span class="line">Error <span class="keyword">while</span> executing topic <span class="built_in">command</span> : Replication factor: 3 larger than available brokers: 1.</span><br><span class="line">[2021-04-09 11:59:26,516] ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException: Replication factor: 3 larger than available brokers: 1.</span><br><span class="line"> (kafka.admin.TopicCommand$)</span><br><span class="line">➜  bin</span><br></pre></td></tr></table></figure><h2 id="Partition-分区机制"><a href="#Partition-分区机制" class="headerlink" title="Partition:分区机制"></a>Partition:分区机制</h2><p>目的: 解决服务伸缩性问题(Scalability)。 提高主题Topic的负载能力。消息会轮询发送到同一Topic主题在不同Broker中的不同Partition分区中</p><p>同类: 类似 MongoDb 和 Elasticsearch 中的 Sharding , Hbase 中的 Region</p><p>说明: kafka将topic划分成多个partition，每个partition是一组有序的消息日志。生产者往名称为A的topic生产的一条消息，改消息只能被发送到Atopic一个分区</p><p>副本是在分区这个层级定义的，每个分区可配置若干个副本，其中只能有一个leader副本，N-1个follower副本。</p><h2 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h2><p>整个故事是这样的：假设C1消费P0,P1, C2消费P2,P3。如果C1从未提交，C1挂掉，C2开始消费P0,P1，发现没有对应提交位移，那么按照C2的auto.offset.reset值决定从那里消费，如果是earliest，从P0，P1的最小位移值（可能不是0）开始消费，如果是latest，从P0, P1的最新位移值（分区高水位值）开始消费。但如果C1之前提交了位移，那么C1挂掉之后C2从C1最新一次提交的位移值开始消费。</p><p>所谓的重复消费是指，C1消费了一部分数据，还没来得及提交这部分数据的位移就挂了。C2承接过来之后会重新消费这部分数据。</p><h2 id="kafka的3层消息架构"><a href="#kafka的3层消息架构" class="headerlink" title="kafka的3层消息架构"></a>kafka的3层消息架构</h2><p>第一层: 主题层(Topic)，每个主题可以配置M个分区，而每个分区可以配置N个副本</p><p>第二层: 分区层(Partition)，每个分区的N个副本中只有一个充当Leader角色，对外提供服务；其他N-1个副本是Follower角色，只提供数据冗余</p><p>第三层: 消息层(Message)，分区中包含若干条消息，每条消息的位移从0开始，依次递增</p><h2 id="持久化数据"><a href="#持久化数据" class="headerlink" title="持久化数据"></a>持久化数据</h2><p>Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件。因为只能追加写入，故避免了缓慢的随机 I/O 操作，改为性能较好的顺序 I/O 写操作，这也是实现 Kafka 高吞吐量特性的一个重要手段。</p><h2 id="数据删除-日志删除"><a href="#数据删除-日志删除" class="headerlink" title="数据删除(日志删除)"></a>数据删除(日志删除)</h2><p>通过日志段（Log Segment）机制。在 Kafka 底层，一个日志又进一步细分成多个日志段，消息被追加写到当前最新的日志段中，当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。</p><h2 id="重平衡：Rebalance"><a href="#重平衡：Rebalance" class="headerlink" title="重平衡：Rebalance"></a>重平衡：Rebalance</h2><p>消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。</p><h2 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h2><p>传统的消息队列最少提供两种消息模型，一种P2P，一种PUB/SUB，而Kafka并没有这么做，巧妙的，它提供了一个消费者组的概念，一个消息可以被多个消费者组消费，但是只能被一个消费者组里的一个消费者消费，这样当只有一个消费者组时就等同与P2P模型，当存在多个消费者组时就是PUB/SUB模型</p><p>消费者组里面的所有消费者实例不仅“瓜分”订阅主题的数据，而且更酷的是它们还能彼此协助。假设组内某个实例挂掉了，Kafka 能够自动检测到，然后把这个 Failed 实例之前负责的分区转移给其他活着的消费者。这个过程就是 Kafka 中大名鼎鼎的“重平衡”（Rebalance）。嗯，其实既是大名鼎鼎，也是臭名昭著，因为由重平衡引发的消费者问题比比皆是。事实上，目前很多重平衡的 Bug 社区都无力解决。</p><p>每个消费者在消费消息的过程中必然需要有个字段记录它当前消费到了分区的哪个位置上，这个字段就是消费者位移（Consumer Offset）。注意，这和上面所说的位移完全不是一个概念。上面的“位移”表征的是分区内的消息位置，它是不变的，即一旦消息被成功写入到一个分区上，它的位移值就是固定的了。而消费者位移则不同，它可能是随时变化的，毕竟它是消费者消费进度的指示器嘛。另外每个消费者有着自己的消费者位移，因此一定要区分这两类位移的区别。我个人把消息在分区中的位移称为分区位移，而把消费者端的位移称为消费者位移。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/apache_kafka_logo_icon.svg&quot; alt=&quot;kafka&quot;&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="Kafka" scheme="https://altman-xu.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>本博客搭建:PicGo+GitHub作为图床</title>
    <link href="https://altman-xu.github.io/2021/04/20/Build-Blog-Picture/"/>
    <id>https://altman-xu.github.io/2021/04/20/Build-Blog-Picture/</id>
    <published>2021-04-20T02:32:37.000Z</published>
    <updated>2023-11-08T10:00:20.896Z</updated>
    
    <content type="html"><![CDATA[<p>博客的图床，又在白嫖 GitHub 了</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://learnku.com/articles/48574">如何使用 Github 作为自己的免费图床</a><br><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">PicGo 文档:配置手册</a></p></blockquote><h2 id="GitHub-仓库-Image"><a href="#GitHub-仓库-Image" class="headerlink" title="GitHub 仓库 Image"></a>GitHub 仓库 Image</h2><p>在 GitHub 上新建仓库，仓库名为 Image (或自定义)，然后无需其他操作</p><h2 id="GitHub-配置-Personal-access-tokens"><a href="#GitHub-配置-Personal-access-tokens" class="headerlink" title="GitHub 配置 Personal access tokens"></a>GitHub 配置 Personal access tokens</h2><p>在 GitHub 右上角头像单击，然后 <code>Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</code> 进入编辑页面<br>Note: 名字可以随便填写，如 Image、Photo<br>Select scopes: 选择 repo 即可<br>然后点击按钮 Generate token 在跳转出来的页面， 将 Token 值 保存起来，后面 配置 PicGo 时用到<br><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/GitHub_New_personal_access_token_1.png" width="50%" height="50%"></p><h2 id="PicGo-使用"><a href="#PicGo-使用" class="headerlink" title="PicGo 使用"></a>PicGo 使用</h2><ol><li><p>安装 PicGo</p> <figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask picgo</span><br></pre></td></tr></table></figure></li><li><p>配置 PicGo<br>打开 PicGo 软件， Mac 屏幕上方状态栏会出现 PicGo 小图标， <code>右击图标-&gt;打开详细窗口-&gt;图床设置-&gt;GitHub图床</code> (如下截图所示界面)<br>设定Token 一栏中填入 上面步骤生成的 Token 值</p><img src="https://raw.githubusercontent.com/altman-xu/altman-xu.github.io/source/ImageForBlog/PicGo%20setting.png" width="50%" height="50%"></li></ol><ol start="3"><li>使用 PicGo<br>将待上传的图片拖动到 Mac 屏幕上方状态栏的 PicGo 小图标(会出现 + 添加图片的标志)，在 + 标志处松开鼠标即为上传<br>然后单击 PicGo 小图标，出现刚刚上传图片的 缩略图， 单击缩略图，即会复制图片链接<br>链接格式可以是 markdown/HTML/URL/UBB/Custom 等 在 <code>右击图标-&gt;打开详细窗口-&gt;上传区可设置</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客的图床，又在白嫖 GitHub 了&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://learn</summary>
      
    
    
    
    <category term="Blog" scheme="https://altman-xu.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://altman-xu.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
